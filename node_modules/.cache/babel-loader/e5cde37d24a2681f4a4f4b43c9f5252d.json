{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _createForOfIteratorHelperLoose from \"@babel/runtime/helpers/createForOfIteratorHelperLoose\";\nimport invariant from 'fbjs/lib/invariant';\n/**\n * A Utility class for calculating viewable items based on current metrics like scroll position and\n * layout.\n *\n * An item is said to be in a \"viewable\" state when any of the following\n * is true for longer than `minimumViewTime` milliseconds (after an interaction if `waitForInteraction`\n * is true):\n *\n * - Occupying >= `viewAreaCoveragePercentThreshold` of the view area XOR fraction of the item\n *   visible in the view area >= `itemVisiblePercentThreshold`.\n * - Entirely visible on screen\n */\n\nclass ViewabilityHelper {\n  constructor(config) {\n    if (config === void 0) {\n      config = {\n        viewAreaCoveragePercentThreshold: 0\n      };\n    }\n\n    this._hasInteracted = false;\n    this._timers = new Set();\n    this._viewableIndices = [];\n    this._viewableItems = new Map();\n    this._config = config;\n  }\n  /**\n   * Cleanup, e.g. on unmount. Clears any pending timers.\n   */\n\n\n  dispose() {\n    this._timers.forEach(clearTimeout);\n  }\n  /**\n   * Determines which items are viewable based on the current metrics and config.\n   */\n\n\n  computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange // Optional optimization to reduce the scan size\n  ) {\n    var _this$_config = this._config,\n        itemVisiblePercentThreshold = _this$_config.itemVisiblePercentThreshold,\n        viewAreaCoveragePercentThreshold = _this$_config.viewAreaCoveragePercentThreshold;\n    var viewAreaMode = viewAreaCoveragePercentThreshold != null;\n    var viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;\n    invariant(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), 'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold');\n    var viewableIndices = [];\n\n    if (itemCount === 0) {\n      return viewableIndices;\n    }\n\n    var firstVisible = -1;\n\n    var _ref = renderRange || {\n      first: 0,\n      last: itemCount - 1\n    },\n        first = _ref.first,\n        last = _ref.last;\n\n    if (last >= itemCount) {\n      console.warn('Invalid render range computing viewability ' + JSON.stringify({\n        renderRange,\n        itemCount\n      }));\n      return [];\n    }\n\n    for (var idx = first; idx <= last; idx++) {\n      var metrics = getFrameMetrics(idx);\n\n      if (!metrics) {\n        continue;\n      }\n\n      var top = metrics.offset - scrollOffset;\n      var bottom = top + metrics.length;\n\n      if (top < viewportHeight && bottom > 0) {\n        firstVisible = idx;\n\n        if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {\n          viewableIndices.push(idx);\n        }\n      } else if (firstVisible >= 0) {\n        break;\n      }\n    }\n\n    return viewableIndices;\n  }\n  /**\n   * Figures out which items are viewable and how that has changed from before and calls\n   * `onViewableItemsChanged` as appropriate.\n   */\n\n\n  onUpdate(itemCount, scrollOffset, viewportHeight, getFrameMetrics, createViewToken, onViewableItemsChanged, renderRange // Optional optimization to reduce the scan size\n  ) {\n    if (this._config.waitForInteraction && !this._hasInteracted || itemCount === 0 || !getFrameMetrics(0)) {\n      return;\n    }\n\n    var viewableIndices = [];\n\n    if (itemCount) {\n      viewableIndices = this.computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange);\n    }\n\n    if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every((v, ii) => v === viewableIndices[ii])) {\n      // We might get a lot of scroll events where visibility doesn't change and we don't want to do\n      // extra work in those cases.\n      return;\n    }\n\n    this._viewableIndices = viewableIndices;\n\n    if (this._config.minimumViewTime) {\n      var handle = setTimeout(() => {\n        this._timers.delete(handle);\n\n        this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);\n      }, this._config.minimumViewTime);\n\n      this._timers.add(handle);\n    } else {\n      this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);\n    }\n  }\n  /**\n   * clean-up cached _viewableIndices to evaluate changed items on next update\n   */\n\n\n  resetViewableIndices() {\n    this._viewableIndices = [];\n  }\n  /**\n   * Records that an interaction has happened even if there has been no scroll.\n   */\n\n\n  recordInteraction() {\n    this._hasInteracted = true;\n  }\n\n  _onUpdateSync( // $FlowFixMe\n  viewableIndicesToCheck, // $FlowFixMe\n  onViewableItemsChanged, // $FlowFixMe\n  createViewToken) {\n    // Filter out indices that have gone out of view since this call was scheduled.\n    viewableIndicesToCheck = viewableIndicesToCheck.filter(ii => this._viewableIndices.includes(ii));\n    var prevItems = this._viewableItems;\n    var nextItems = new Map(viewableIndicesToCheck.map(ii => {\n      var viewable = createViewToken(ii, true);\n      return [viewable.key, viewable];\n    }));\n    var changed = [];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(nextItems), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n          key = _step$value[0],\n          viewable = _step$value[1];\n\n      if (!prevItems.has(key)) {\n        changed.push(viewable);\n      }\n    }\n\n    for (var _iterator2 = _createForOfIteratorHelperLoose(prevItems), _step2; !(_step2 = _iterator2()).done;) {\n      var _step2$value = _step2.value,\n          _key = _step2$value[0],\n          _viewable = _step2$value[1];\n\n      if (!nextItems.has(_key)) {\n        changed.push(_objectSpread(_objectSpread({}, _viewable), {}, {\n          isViewable: false\n        }));\n      }\n    }\n\n    if (changed.length > 0) {\n      this._viewableItems = nextItems;\n      onViewableItemsChanged({\n        viewableItems: Array.from(nextItems.values()),\n        changed,\n        viewabilityConfig: this._config\n      });\n    }\n  }\n\n}\n\nfunction _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {\n  if (_isEntirelyVisible(top, bottom, viewportHeight)) {\n    return true;\n  } else {\n    var pixels = _getPixelsVisible(top, bottom, viewportHeight);\n\n    var percent = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);\n    return percent >= viewablePercentThreshold;\n  }\n}\n\nfunction _getPixelsVisible(top, bottom, viewportHeight) {\n  var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);\n  return Math.max(0, visibleHeight);\n}\n\nfunction _isEntirelyVisible(top, bottom, viewportHeight) {\n  return top >= 0 && bottom <= viewportHeight && bottom > top;\n}\n\nexport default ViewabilityHelper;","map":{"version":3,"sources":["C:/Users/alex/Documents/GitHub/alexfox-portfolio/node_modules/react-native-web/dist/vendor/react-native/ViewabilityHelper/index.js"],"names":["_objectSpread","_createForOfIteratorHelperLoose","invariant","ViewabilityHelper","constructor","config","viewAreaCoveragePercentThreshold","_hasInteracted","_timers","Set","_viewableIndices","_viewableItems","Map","_config","dispose","forEach","clearTimeout","computeViewableItems","itemCount","scrollOffset","viewportHeight","getFrameMetrics","renderRange","_this$_config","itemVisiblePercentThreshold","viewAreaMode","viewablePercentThreshold","viewableIndices","firstVisible","_ref","first","last","console","warn","JSON","stringify","idx","metrics","top","offset","bottom","length","_isViewable","push","onUpdate","createViewToken","onViewableItemsChanged","waitForInteraction","every","v","ii","minimumViewTime","handle","setTimeout","delete","_onUpdateSync","add","resetViewableIndices","recordInteraction","viewableIndicesToCheck","filter","includes","prevItems","nextItems","map","viewable","key","changed","_iterator","_step","done","_step$value","value","has","_iterator2","_step2","_step2$value","_key","_viewable","isViewable","viewableItems","Array","from","values","viewabilityConfig","itemLength","_isEntirelyVisible","pixels","_getPixelsVisible","percent","visibleHeight","Math","min","max"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _createForOfIteratorHelperLoose from \"@babel/runtime/helpers/createForOfIteratorHelperLoose\";\nimport invariant from 'fbjs/lib/invariant';\n\n/**\n * A Utility class for calculating viewable items based on current metrics like scroll position and\n * layout.\n *\n * An item is said to be in a \"viewable\" state when any of the following\n * is true for longer than `minimumViewTime` milliseconds (after an interaction if `waitForInteraction`\n * is true):\n *\n * - Occupying >= `viewAreaCoveragePercentThreshold` of the view area XOR fraction of the item\n *   visible in the view area >= `itemVisiblePercentThreshold`.\n * - Entirely visible on screen\n */\nclass ViewabilityHelper {\n  constructor(config) {\n    if (config === void 0) {\n      config = {\n        viewAreaCoveragePercentThreshold: 0\n      };\n    }\n\n    this._hasInteracted = false;\n    this._timers = new Set();\n    this._viewableIndices = [];\n    this._viewableItems = new Map();\n    this._config = config;\n  }\n  /**\n   * Cleanup, e.g. on unmount. Clears any pending timers.\n   */\n\n\n  dispose() {\n    this._timers.forEach(clearTimeout);\n  }\n  /**\n   * Determines which items are viewable based on the current metrics and config.\n   */\n\n\n  computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange // Optional optimization to reduce the scan size\n  ) {\n    var _this$_config = this._config,\n        itemVisiblePercentThreshold = _this$_config.itemVisiblePercentThreshold,\n        viewAreaCoveragePercentThreshold = _this$_config.viewAreaCoveragePercentThreshold;\n    var viewAreaMode = viewAreaCoveragePercentThreshold != null;\n    var viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;\n    invariant(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), 'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold');\n    var viewableIndices = [];\n\n    if (itemCount === 0) {\n      return viewableIndices;\n    }\n\n    var firstVisible = -1;\n\n    var _ref = renderRange || {\n      first: 0,\n      last: itemCount - 1\n    },\n        first = _ref.first,\n        last = _ref.last;\n\n    if (last >= itemCount) {\n      console.warn('Invalid render range computing viewability ' + JSON.stringify({\n        renderRange,\n        itemCount\n      }));\n      return [];\n    }\n\n    for (var idx = first; idx <= last; idx++) {\n      var metrics = getFrameMetrics(idx);\n\n      if (!metrics) {\n        continue;\n      }\n\n      var top = metrics.offset - scrollOffset;\n      var bottom = top + metrics.length;\n\n      if (top < viewportHeight && bottom > 0) {\n        firstVisible = idx;\n\n        if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {\n          viewableIndices.push(idx);\n        }\n      } else if (firstVisible >= 0) {\n        break;\n      }\n    }\n\n    return viewableIndices;\n  }\n  /**\n   * Figures out which items are viewable and how that has changed from before and calls\n   * `onViewableItemsChanged` as appropriate.\n   */\n\n\n  onUpdate(itemCount, scrollOffset, viewportHeight, getFrameMetrics, createViewToken, onViewableItemsChanged, renderRange // Optional optimization to reduce the scan size\n  ) {\n    if (this._config.waitForInteraction && !this._hasInteracted || itemCount === 0 || !getFrameMetrics(0)) {\n      return;\n    }\n\n    var viewableIndices = [];\n\n    if (itemCount) {\n      viewableIndices = this.computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange);\n    }\n\n    if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every((v, ii) => v === viewableIndices[ii])) {\n      // We might get a lot of scroll events where visibility doesn't change and we don't want to do\n      // extra work in those cases.\n      return;\n    }\n\n    this._viewableIndices = viewableIndices;\n\n    if (this._config.minimumViewTime) {\n      var handle = setTimeout(() => {\n        this._timers.delete(handle);\n\n        this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);\n      }, this._config.minimumViewTime);\n\n      this._timers.add(handle);\n    } else {\n      this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);\n    }\n  }\n  /**\n   * clean-up cached _viewableIndices to evaluate changed items on next update\n   */\n\n\n  resetViewableIndices() {\n    this._viewableIndices = [];\n  }\n  /**\n   * Records that an interaction has happened even if there has been no scroll.\n   */\n\n\n  recordInteraction() {\n    this._hasInteracted = true;\n  }\n\n  _onUpdateSync( // $FlowFixMe\n  viewableIndicesToCheck, // $FlowFixMe\n  onViewableItemsChanged, // $FlowFixMe\n  createViewToken) {\n    // Filter out indices that have gone out of view since this call was scheduled.\n    viewableIndicesToCheck = viewableIndicesToCheck.filter(ii => this._viewableIndices.includes(ii));\n    var prevItems = this._viewableItems;\n    var nextItems = new Map(viewableIndicesToCheck.map(ii => {\n      var viewable = createViewToken(ii, true);\n      return [viewable.key, viewable];\n    }));\n    var changed = [];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(nextItems), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n          key = _step$value[0],\n          viewable = _step$value[1];\n\n      if (!prevItems.has(key)) {\n        changed.push(viewable);\n      }\n    }\n\n    for (var _iterator2 = _createForOfIteratorHelperLoose(prevItems), _step2; !(_step2 = _iterator2()).done;) {\n      var _step2$value = _step2.value,\n          _key = _step2$value[0],\n          _viewable = _step2$value[1];\n\n      if (!nextItems.has(_key)) {\n        changed.push(_objectSpread(_objectSpread({}, _viewable), {}, {\n          isViewable: false\n        }));\n      }\n    }\n\n    if (changed.length > 0) {\n      this._viewableItems = nextItems;\n      onViewableItemsChanged({\n        viewableItems: Array.from(nextItems.values()),\n        changed,\n        viewabilityConfig: this._config\n      });\n    }\n  }\n\n}\n\nfunction _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {\n  if (_isEntirelyVisible(top, bottom, viewportHeight)) {\n    return true;\n  } else {\n    var pixels = _getPixelsVisible(top, bottom, viewportHeight);\n\n    var percent = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);\n    return percent >= viewablePercentThreshold;\n  }\n}\n\nfunction _getPixelsVisible(top, bottom, viewportHeight) {\n  var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);\n  return Math.max(0, visibleHeight);\n}\n\nfunction _isEntirelyVisible(top, bottom, viewportHeight) {\n  return top >= 0 && bottom <= viewportHeight && bottom > top;\n}\n\nexport default ViewabilityHelper;"]},"metadata":{},"sourceType":"module"}