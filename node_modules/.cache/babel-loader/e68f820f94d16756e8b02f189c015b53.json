{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n/* eslint no-bitwise: 0 */\n'use strict';\n\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport AnimatedNode from './AnimatedNode';\nimport AnimatedWithChildren from './AnimatedWithChildren';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport invariant from 'fbjs/lib/invariant';\nimport normalizeColor from 'normalize-css-color';\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar linear = t => t;\n/**\n * Very handy helper to map input ranges to output ranges with an easing\n * function and custom behavior outside of the ranges.\n */\n\n\nfunction createInterpolation(config) {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return createInterpolationFromStringOutputRange(config);\n  }\n\n  var outputRange = config.outputRange;\n  checkInfiniteRange('outputRange', outputRange);\n  var inputRange = config.inputRange;\n  checkInfiniteRange('inputRange', inputRange);\n  checkValidInputRange(inputRange);\n  invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');\n  var easing = config.easing || linear;\n  var extrapolateLeft = 'extend';\n\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n\n  var extrapolateRight = 'extend';\n\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n\n  return input => {\n    invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');\n    var range = findRange(input, inputRange);\n    return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);\n  };\n}\n\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {\n  var result = input; // Extrapolate\n\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {// noop\n    }\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {// noop\n    }\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n\n    return outputMax;\n  } // Input Range\n\n\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  } // Easing\n\n\n  result = easing(result); // Output Range\n\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nfunction colorToRgba(input) {\n  var normalizedColor = normalizeColor(input);\n\n  if (normalizedColor === null || typeof normalizedColor !== 'number') {\n    return input;\n  }\n\n  normalizedColor = normalizedColor || 0;\n  var r = (normalizedColor & 0xff000000) >>> 24;\n  var g = (normalizedColor & 0x00ff0000) >>> 16;\n  var b = (normalizedColor & 0x0000ff00) >>> 8;\n  var a = (normalizedColor & 0x000000ff) / 255;\n  return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n}\n\nvar stringShapeRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36) // colors\n *   -45deg                  // values with units\n */\n\nfunction createInterpolationFromStringOutputRange(config) {\n  var outputRange = config.outputRange;\n  invariant(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange); // ['rgba(0, 100, 200, 0)', 'rgba(50, 150, 250, 0.5)']\n  // ->\n  // [\n  //   [0, 50],\n  //   [100, 150],\n  //   [200, 250],\n  //   [0, 0.5],\n  // ]\n\n  /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need to\n   * guard against this possibility.\n   */\n\n  var outputRanges = outputRange[0].match(stringShapeRegex).map(() => []);\n  outputRange.forEach(value => {\n    /* $FlowFixMe(>=0.18.0): `value.match()` can return `null`. Need to guard\n     * against this possibility.\n     */\n    value.match(stringShapeRegex).forEach((number, i) => {\n      outputRanges[i].push(+number);\n    });\n  });\n  var interpolations = outputRange[0].match(stringShapeRegex)\n  /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need\n   * to guard against this possibility. */\n  .map((value, i) => {\n    return createInterpolation(_objectSpread(_objectSpread({}, config), {}, {\n      outputRange: outputRanges[i]\n    }));\n  }); // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to\n  // round the opacity (4th column).\n\n  var shouldRound = isRgbOrRgba(outputRange[0]);\n  return input => {\n    var i = 0; // 'rgba(0, 100, 200, 0)'\n    // ->\n    // 'rgba(${interpolations[0](input)}, ${interpolations[1](input)}, ...'\n\n    return outputRange[0].replace(stringShapeRegex, () => {\n      var val = +interpolations[i++](input);\n\n      if (shouldRound) {\n        val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      }\n\n      return String(val);\n    });\n  };\n}\n\nfunction isRgbOrRgba(range) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\n\nfunction checkPattern(arr) {\n  var pattern = arr[0].replace(stringShapeRegex, '');\n\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);\n  }\n}\n\nfunction findRange(input, inputRange) {\n  var i;\n\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n\n  return i - 1;\n}\n\nfunction checkValidInputRange(arr) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(arr[i] >= arr[i - 1],\n    /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n     * one or both of the operands may be something that doesn't cleanly\n     * convert to a string, like undefined, null, and object, etc. If you really\n     * mean this implicit string conversion, you can do something like\n     * String(myThing)\n     */\n    'inputRange must be monotonically non-decreasing ' + arr);\n  }\n}\n\nfunction checkInfiniteRange(name, arr) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,\n  /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n   * one or both of the operands may be something that doesn't cleanly convert\n   * to a string, like undefined, null, and object, etc. If you really mean\n   * this implicit string conversion, you can do something like\n   * String(myThing)\n   */\n  name + 'cannot be ]-infinity;+infinity[ ' + arr);\n}\n\nclass AnimatedInterpolation extends AnimatedWithChildren {\n  // Export for testing.\n  constructor(parent, config) {\n    super();\n    this._parent = parent;\n    this._config = config;\n    this._interpolation = createInterpolation(config);\n  }\n\n  __makeNative() {\n    this._parent.__makeNative();\n\n    super.__makeNative();\n  }\n\n  __getValue() {\n    var parentValue = this._parent.__getValue();\n\n    invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');\n    return this._interpolation(parentValue);\n  }\n\n  interpolate(config) {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  __attach() {\n    this._parent.__addChild(this);\n  }\n\n  __detach() {\n    this._parent.__removeChild(this);\n\n    super.__detach();\n  }\n\n  __transformDataType(range) {\n    return range.map(NativeAnimatedHelper.transformDataType);\n  }\n\n  __getNativeConfig() {\n    if (__DEV__) {\n      NativeAnimatedHelper.validateInterpolation(this._config);\n    }\n\n    return {\n      inputRange: this._config.inputRange,\n      // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here\n\n      /* $FlowFixMe(>=0.38.0) - Flow error detected during the deployment of\n       * v0.38.0. To see the error, remove this comment and run flow */\n      outputRange: this.__transformDataType(this._config.outputRange),\n      extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n      extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',\n      type: 'interpolation'\n    };\n  }\n\n}\n\nAnimatedInterpolation.__createInterpolation = createInterpolation;\nexport default AnimatedInterpolation;","map":{"version":3,"sources":["C:/Users/alex/Documents/GitHub/alexfox-portfolio/node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedInterpolation.js"],"names":["_objectSpread","AnimatedNode","AnimatedWithChildren","NativeAnimatedHelper","invariant","normalizeColor","__DEV__","process","env","NODE_ENV","linear","t","createInterpolation","config","outputRange","createInterpolationFromStringOutputRange","checkInfiniteRange","inputRange","checkValidInputRange","length","easing","extrapolateLeft","undefined","extrapolate","extrapolateRight","input","range","findRange","interpolate","inputMin","inputMax","outputMin","outputMax","result","Infinity","colorToRgba","normalizedColor","r","g","b","a","stringShapeRegex","map","checkPattern","outputRanges","match","forEach","value","number","i","push","interpolations","shouldRound","isRgbOrRgba","replace","val","Math","round","String","startsWith","arr","pattern","name","AnimatedInterpolation","constructor","parent","_parent","_config","_interpolation","__makeNative","__getValue","parentValue","__attach","__addChild","__detach","__removeChild","__transformDataType","transformDataType","__getNativeConfig","validateInterpolation","type","__createInterpolation"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n/* eslint no-bitwise: 0 */\n'use strict';\n\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport AnimatedNode from './AnimatedNode';\nimport AnimatedWithChildren from './AnimatedWithChildren';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport invariant from 'fbjs/lib/invariant';\nimport normalizeColor from 'normalize-css-color';\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar linear = t => t;\n/**\n * Very handy helper to map input ranges to output ranges with an easing\n * function and custom behavior outside of the ranges.\n */\n\n\nfunction createInterpolation(config) {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return createInterpolationFromStringOutputRange(config);\n  }\n\n  var outputRange = config.outputRange;\n  checkInfiniteRange('outputRange', outputRange);\n  var inputRange = config.inputRange;\n  checkInfiniteRange('inputRange', inputRange);\n  checkValidInputRange(inputRange);\n  invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');\n  var easing = config.easing || linear;\n  var extrapolateLeft = 'extend';\n\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n\n  var extrapolateRight = 'extend';\n\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n\n  return input => {\n    invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');\n    var range = findRange(input, inputRange);\n    return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);\n  };\n}\n\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {\n  var result = input; // Extrapolate\n\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {// noop\n    }\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {// noop\n    }\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n\n    return outputMax;\n  } // Input Range\n\n\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  } // Easing\n\n\n  result = easing(result); // Output Range\n\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nfunction colorToRgba(input) {\n  var normalizedColor = normalizeColor(input);\n\n  if (normalizedColor === null || typeof normalizedColor !== 'number') {\n    return input;\n  }\n\n  normalizedColor = normalizedColor || 0;\n  var r = (normalizedColor & 0xff000000) >>> 24;\n  var g = (normalizedColor & 0x00ff0000) >>> 16;\n  var b = (normalizedColor & 0x0000ff00) >>> 8;\n  var a = (normalizedColor & 0x000000ff) / 255;\n  return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n}\n\nvar stringShapeRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36) // colors\n *   -45deg                  // values with units\n */\n\nfunction createInterpolationFromStringOutputRange(config) {\n  var outputRange = config.outputRange;\n  invariant(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange); // ['rgba(0, 100, 200, 0)', 'rgba(50, 150, 250, 0.5)']\n  // ->\n  // [\n  //   [0, 50],\n  //   [100, 150],\n  //   [200, 250],\n  //   [0, 0.5],\n  // ]\n\n  /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need to\n   * guard against this possibility.\n   */\n\n  var outputRanges = outputRange[0].match(stringShapeRegex).map(() => []);\n  outputRange.forEach(value => {\n    /* $FlowFixMe(>=0.18.0): `value.match()` can return `null`. Need to guard\n     * against this possibility.\n     */\n    value.match(stringShapeRegex).forEach((number, i) => {\n      outputRanges[i].push(+number);\n    });\n  });\n  var interpolations = outputRange[0].match(stringShapeRegex)\n  /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need\n   * to guard against this possibility. */\n  .map((value, i) => {\n    return createInterpolation(_objectSpread(_objectSpread({}, config), {}, {\n      outputRange: outputRanges[i]\n    }));\n  }); // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to\n  // round the opacity (4th column).\n\n  var shouldRound = isRgbOrRgba(outputRange[0]);\n  return input => {\n    var i = 0; // 'rgba(0, 100, 200, 0)'\n    // ->\n    // 'rgba(${interpolations[0](input)}, ${interpolations[1](input)}, ...'\n\n    return outputRange[0].replace(stringShapeRegex, () => {\n      var val = +interpolations[i++](input);\n\n      if (shouldRound) {\n        val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      }\n\n      return String(val);\n    });\n  };\n}\n\nfunction isRgbOrRgba(range) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\n\nfunction checkPattern(arr) {\n  var pattern = arr[0].replace(stringShapeRegex, '');\n\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);\n  }\n}\n\nfunction findRange(input, inputRange) {\n  var i;\n\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n\n  return i - 1;\n}\n\nfunction checkValidInputRange(arr) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(arr[i] >= arr[i - 1],\n    /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n     * one or both of the operands may be something that doesn't cleanly\n     * convert to a string, like undefined, null, and object, etc. If you really\n     * mean this implicit string conversion, you can do something like\n     * String(myThing)\n     */\n    'inputRange must be monotonically non-decreasing ' + arr);\n  }\n}\n\nfunction checkInfiniteRange(name, arr) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,\n  /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n   * one or both of the operands may be something that doesn't cleanly convert\n   * to a string, like undefined, null, and object, etc. If you really mean\n   * this implicit string conversion, you can do something like\n   * String(myThing)\n   */\n  name + 'cannot be ]-infinity;+infinity[ ' + arr);\n}\n\nclass AnimatedInterpolation extends AnimatedWithChildren {\n  // Export for testing.\n  constructor(parent, config) {\n    super();\n    this._parent = parent;\n    this._config = config;\n    this._interpolation = createInterpolation(config);\n  }\n\n  __makeNative() {\n    this._parent.__makeNative();\n\n    super.__makeNative();\n  }\n\n  __getValue() {\n    var parentValue = this._parent.__getValue();\n\n    invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');\n    return this._interpolation(parentValue);\n  }\n\n  interpolate(config) {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  __attach() {\n    this._parent.__addChild(this);\n  }\n\n  __detach() {\n    this._parent.__removeChild(this);\n\n    super.__detach();\n  }\n\n  __transformDataType(range) {\n    return range.map(NativeAnimatedHelper.transformDataType);\n  }\n\n  __getNativeConfig() {\n    if (__DEV__) {\n      NativeAnimatedHelper.validateInterpolation(this._config);\n    }\n\n    return {\n      inputRange: this._config.inputRange,\n      // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here\n\n      /* $FlowFixMe(>=0.38.0) - Flow error detected during the deployment of\n       * v0.38.0. To see the error, remove this comment and run flow */\n      outputRange: this.__transformDataType(this._config.outputRange),\n      extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n      extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',\n      type: 'interpolation'\n    };\n  }\n\n}\n\nAnimatedInterpolation.__createInterpolation = createInterpolation;\nexport default AnimatedInterpolation;"]},"metadata":{},"sourceType":"module"}