{"ast":null,"code":"/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from 'fbjs/lib/invariant';\nimport canUseDOM from '../../modules/canUseDom';\nvar initialURL = canUseDOM ? window.location.href : '';\n\nclass Linking {\n  constructor() {\n    this._eventCallbacks = {};\n\n    this.addEventListener = (event, callback) => {\n      if (!this._eventCallbacks[event]) {\n        this._eventCallbacks[event] = [callback];\n        return;\n      }\n\n      this._eventCallbacks[event].push(callback);\n    };\n\n    this.removeEventListener = (event, callback) => {\n      var callbacks = this._eventCallbacks[event];\n      var filteredCallbacks = callbacks.filter(c => c.toString() !== callback.toString());\n      this._eventCallbacks[event] = filteredCallbacks;\n    };\n  }\n\n  _dispatchEvent(event) {\n    for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      data[_key - 1] = arguments[_key];\n    }\n\n    var listeners = this._eventCallbacks[event];\n\n    if (listeners != null && Array.isArray(listeners)) {\n      listeners.map(listener => {\n        listener(...data);\n      });\n    }\n  }\n  /**\n   * Adds a event listener for the specified event. The callback will be called when the\n   * said event is dispatched.\n   */\n\n\n  canOpenURL() {\n    return Promise.resolve(true);\n  }\n\n  getInitialURL() {\n    return Promise.resolve(initialURL);\n  }\n  /**\n   * Try to open the given url in a secure fashion. The method returns a Promise object.\n   * If a target is passed (including undefined) that target will be used, otherwise '_blank'.\n   * If the url opens, the promise is resolved. If not, the promise is rejected.\n   * Dispatches the `onOpen` event if `url` is opened successfully.\n   */\n\n\n  openURL(url, target) {\n    if (arguments.length === 1) {\n      target = '_blank';\n    }\n\n    try {\n      open(url, target);\n\n      this._dispatchEvent('onOpen', url);\n\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  _validateURL(url) {\n    invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);\n    invariant(url, 'Invalid URL: cannot be empty');\n  }\n\n}\n\nvar open = (url, target) => {\n  if (canUseDOM) {\n    var urlToOpen = new URL(url, window.location).toString();\n\n    if (urlToOpen.indexOf('tel:') === 0) {\n      window.location = urlToOpen;\n    } else {\n      window.open(urlToOpen, target, 'noopener');\n    }\n  }\n};\n\nexport default new Linking();","map":{"version":3,"sources":["C:/Users/alex/Documents/GitHub/alexfox-portfolio/node_modules/react-native-web/dist/exports/Linking/index.js"],"names":["invariant","canUseDOM","initialURL","window","location","href","Linking","constructor","_eventCallbacks","addEventListener","event","callback","push","removeEventListener","callbacks","filteredCallbacks","filter","c","toString","_dispatchEvent","_len","arguments","length","data","Array","_key","listeners","isArray","map","listener","canOpenURL","Promise","resolve","getInitialURL","openURL","url","target","open","e","reject","_validateURL","urlToOpen","URL","indexOf"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from 'fbjs/lib/invariant';\nimport canUseDOM from '../../modules/canUseDom';\nvar initialURL = canUseDOM ? window.location.href : '';\n\nclass Linking {\n  constructor() {\n    this._eventCallbacks = {};\n\n    this.addEventListener = (event, callback) => {\n      if (!this._eventCallbacks[event]) {\n        this._eventCallbacks[event] = [callback];\n        return;\n      }\n\n      this._eventCallbacks[event].push(callback);\n    };\n\n    this.removeEventListener = (event, callback) => {\n      var callbacks = this._eventCallbacks[event];\n      var filteredCallbacks = callbacks.filter(c => c.toString() !== callback.toString());\n      this._eventCallbacks[event] = filteredCallbacks;\n    };\n  }\n\n  _dispatchEvent(event) {\n    for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      data[_key - 1] = arguments[_key];\n    }\n\n    var listeners = this._eventCallbacks[event];\n\n    if (listeners != null && Array.isArray(listeners)) {\n      listeners.map(listener => {\n        listener(...data);\n      });\n    }\n  }\n  /**\n   * Adds a event listener for the specified event. The callback will be called when the\n   * said event is dispatched.\n   */\n\n\n  canOpenURL() {\n    return Promise.resolve(true);\n  }\n\n  getInitialURL() {\n    return Promise.resolve(initialURL);\n  }\n  /**\n   * Try to open the given url in a secure fashion. The method returns a Promise object.\n   * If a target is passed (including undefined) that target will be used, otherwise '_blank'.\n   * If the url opens, the promise is resolved. If not, the promise is rejected.\n   * Dispatches the `onOpen` event if `url` is opened successfully.\n   */\n\n\n  openURL(url, target) {\n    if (arguments.length === 1) {\n      target = '_blank';\n    }\n\n    try {\n      open(url, target);\n\n      this._dispatchEvent('onOpen', url);\n\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  _validateURL(url) {\n    invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);\n    invariant(url, 'Invalid URL: cannot be empty');\n  }\n\n}\n\nvar open = (url, target) => {\n  if (canUseDOM) {\n    var urlToOpen = new URL(url, window.location).toString();\n\n    if (urlToOpen.indexOf('tel:') === 0) {\n      window.location = urlToOpen;\n    } else {\n      window.open(urlToOpen, target, 'noopener');\n    }\n  }\n};\n\nexport default new Linking();"]},"metadata":{},"sourceType":"module"}