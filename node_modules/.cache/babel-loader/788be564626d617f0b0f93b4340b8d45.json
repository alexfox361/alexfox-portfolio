{"ast":null,"code":"/**\r\n * @param baseConfig Config where other config will be merged into. This object will be mutated.\r\n * @param configExtension Partial config to merge into the `baseConfig`.\r\n */\nfunction mergeConfigs(baseConfig, configExtension) {\n  for (var key in configExtension) {\n    mergePropertyRecursively(baseConfig, key, configExtension[key]);\n  }\n\n  return baseConfig;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar overrideTypes = /*#__PURE__*/new Set(['string', 'number', 'boolean']);\n\nfunction mergePropertyRecursively(baseObject, mergeKey, mergeValue) {\n  if (!hasOwnProperty.call(baseObject, mergeKey) || overrideTypes.has(typeof mergeValue) || mergeValue === null) {\n    baseObject[mergeKey] = mergeValue;\n    return;\n  }\n\n  if (Array.isArray(mergeValue) && Array.isArray(baseObject[mergeKey])) {\n    baseObject[mergeKey] = baseObject[mergeKey].concat(mergeValue);\n    return;\n  }\n\n  if (typeof mergeValue === 'object' && typeof baseObject[mergeKey] === 'object') {\n    if (baseObject[mergeKey] === null) {\n      baseObject[mergeKey] = mergeValue;\n      return;\n    }\n\n    for (var nextKey in mergeValue) {\n      mergePropertyRecursively(baseObject[mergeKey], nextKey, mergeValue[nextKey]);\n    }\n  }\n}\n\nexport { mergeConfigs };","map":{"version":3,"sources":["../../src/lib/merge-configs.ts"],"names":["mergePropertyRecursively","configExtension","hasOwnProperty","Object","overrideTypes","mergeValue","baseObject","Array"],"mappings":"AAEA;;;AAGG;AACa,SAAA,YAAA,CAAA,UAAA,EAAA,eAAA,EAAiE;AAC7E,OAAK,IAAL,GAAA,IAAA,eAAA,EAAmC;AAC/BA,IAAAA,wBAAwB,CAAA,UAAA,EAAA,GAAA,EAAyBC,eAAe,CAAhED,GAAgE,CAAxC,CAAxBA;AACH;;AAED,SAAA,UAAA;AACH;;AAED,IAAME,cAAc,GAAGC,MAAM,CAANA,SAAAA,CAAvB,cAAA;AACA,IAAMC,aAAa,GAAA,aAAG,IAAA,GAAA,CAAQ,CAAA,QAAA,EAAA,QAAA,EAA9B,SAA8B,CAAR,CAAtB;;AAEA,SAAA,wBAAA,CAAA,UAAA,EAAA,QAAA,EAAA,UAAA,EAGuB;AAEnB,MACI,CAACF,cAAc,CAAdA,IAAAA,CAAAA,UAAAA,EAAD,QAACA,CAAD,IACAE,aAAa,CAAbA,GAAAA,CAAkB,OADlB,UACAA,CADA,IAEAC,UAAU,KAHd,IAAA,EAIE;AACEC,IAAAA,UAAU,CAAVA,QAAU,CAAVA,GAAAA,UAAAA;AACA;AACH;;AAED,MAAIC,KAAK,CAALA,OAAAA,CAAAA,UAAAA,KAA6BA,KAAK,CAALA,OAAAA,CAAcD,UAAU,CAAzD,QAAyD,CAAxBC,CAAjC,EAAsE;AAClED,IAAAA,UAAU,CAAVA,QAAU,CAAVA,GAAwBA,UAAU,CAAVA,QAAU,CAAVA,CAAAA,MAAAA,CAAxBA,UAAwBA,CAAxBA;AACA;AACH;;AAED,MAAI,OAAA,UAAA,KAAA,QAAA,IAAkC,OAAOA,UAAU,CAAjB,QAAiB,CAAjB,KAAtC,QAAA,EAAgF;AAC5E,QAAIA,UAAU,CAAVA,QAAU,CAAVA,KAAJ,IAAA,EAAmC;AAC/BA,MAAAA,UAAU,CAAVA,QAAU,CAAVA,GAAAA,UAAAA;AACA;AACH;;AAED,SAAK,IAAL,OAAA,IAAA,UAAA,EAAkC;AAC9BN,MAAAA,wBAAwB,CACpBM,UAAU,CADU,QACV,CADU,EAAA,OAAA,EAGpBD,UAAU,CAHdL,OAGc,CAHU,CAAxBA;AAKH;AACJ;AACJ","sourcesContent":["import { Config } from './types'\n\n/**\n * @param baseConfig Config where other config will be merged into. This object will be mutated.\n * @param configExtension Partial config to merge into the `baseConfig`.\n */\nexport function mergeConfigs(baseConfig: Config, configExtension: Partial<Config>) {\n    for (const key in configExtension) {\n        mergePropertyRecursively(baseConfig as any, key, configExtension[key as keyof Config])\n    }\n\n    return baseConfig\n}\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty\nconst overrideTypes = new Set(['string', 'number', 'boolean'])\n\nfunction mergePropertyRecursively(\n    baseObject: Record<string, unknown>,\n    mergeKey: string,\n    mergeValue: unknown,\n) {\n    if (\n        !hasOwnProperty.call(baseObject, mergeKey) ||\n        overrideTypes.has(typeof mergeValue) ||\n        mergeValue === null\n    ) {\n        baseObject[mergeKey] = mergeValue\n        return\n    }\n\n    if (Array.isArray(mergeValue) && Array.isArray(baseObject[mergeKey])) {\n        baseObject[mergeKey] = (baseObject[mergeKey] as unknown[]).concat(mergeValue)\n        return\n    }\n\n    if (typeof mergeValue === 'object' && typeof baseObject[mergeKey] === 'object') {\n        if (baseObject[mergeKey] === null) {\n            baseObject[mergeKey] = mergeValue\n            return\n        }\n\n        for (const nextKey in mergeValue) {\n            mergePropertyRecursively(\n                baseObject[mergeKey] as Record<string, unknown>,\n                nextKey,\n                mergeValue[nextKey as keyof object],\n            )\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}