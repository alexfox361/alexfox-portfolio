{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport AnimatedNode from './AnimatedNode';\nimport AnimatedTransform from './AnimatedTransform';\nimport AnimatedWithChildren from './AnimatedWithChildren';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport StyleSheet from '../../../../exports/StyleSheet';\nvar flattenStyle = StyleSheet.flatten;\n\nclass AnimatedStyle extends AnimatedWithChildren {\n  constructor(style) {\n    super();\n    style = flattenStyle(style) || {};\n\n    if (style.transform) {\n      style = _objectSpread(_objectSpread({}, style), {}, {\n        transform: new AnimatedTransform(style.transform)\n      });\n    }\n\n    this._style = style;\n  } // Recursively get values for nested styles (like iOS's shadowOffset)\n\n\n  _walkStyleAndGetValues(style) {\n    var updatedStyle = {};\n\n    for (var key in style) {\n      var value = style[key];\n\n      if (value instanceof AnimatedNode) {\n        if (!value.__isNative) {\n          // We cannot use value of natively driven nodes this way as the value we have access from\n          // JS may not be up to date.\n          updatedStyle[key] = value.__getValue();\n        }\n      } else if (value && !Array.isArray(value) && typeof value === 'object') {\n        // Support animating nested values (for example: shadowOffset.height)\n        updatedStyle[key] = this._walkStyleAndGetValues(value);\n      } else {\n        updatedStyle[key] = value;\n      }\n    }\n\n    return updatedStyle;\n  }\n\n  __getValue() {\n    return this._walkStyleAndGetValues(this._style);\n  } // Recursively get animated values for nested styles (like iOS's shadowOffset)\n\n\n  _walkStyleAndGetAnimatedValues(style) {\n    var updatedStyle = {};\n\n    for (var key in style) {\n      var value = style[key];\n\n      if (value instanceof AnimatedNode) {\n        updatedStyle[key] = value.__getAnimatedValue();\n      } else if (value && !Array.isArray(value) && typeof value === 'object') {\n        // Support animating nested values (for example: shadowOffset.height)\n        updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);\n      }\n    }\n\n    return updatedStyle;\n  }\n\n  __getAnimatedValue() {\n    return this._walkStyleAndGetAnimatedValues(this._style);\n  }\n\n  __attach() {\n    for (var key in this._style) {\n      var value = this._style[key];\n\n      if (value instanceof AnimatedNode) {\n        value.__addChild(this);\n      }\n    }\n  }\n\n  __detach() {\n    for (var key in this._style) {\n      var value = this._style[key];\n\n      if (value instanceof AnimatedNode) {\n        value.__removeChild(this);\n      }\n    }\n\n    super.__detach();\n  }\n\n  __makeNative() {\n    for (var key in this._style) {\n      var value = this._style[key];\n\n      if (value instanceof AnimatedNode) {\n        value.__makeNative();\n      }\n    }\n\n    super.__makeNative();\n  }\n\n  __getNativeConfig() {\n    var styleConfig = {};\n\n    for (var styleKey in this._style) {\n      if (this._style[styleKey] instanceof AnimatedNode) {\n        var style = this._style[styleKey];\n\n        style.__makeNative();\n\n        styleConfig[styleKey] = style.__getNativeTag();\n      } // Non-animated styles are set using `setNativeProps`, no need\n      // to pass those as a part of the node config\n\n    }\n\n    NativeAnimatedHelper.validateStyles(styleConfig);\n    return {\n      type: 'style',\n      style: styleConfig\n    };\n  }\n\n}\n\nexport default AnimatedStyle;","map":{"version":3,"sources":["C:/Users/alex/Documents/GitHub/alexfox-portfolio/node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedStyle.js"],"names":["_objectSpread","AnimatedNode","AnimatedTransform","AnimatedWithChildren","NativeAnimatedHelper","StyleSheet","flattenStyle","flatten","AnimatedStyle","constructor","style","transform","_style","_walkStyleAndGetValues","updatedStyle","key","value","__isNative","__getValue","Array","isArray","_walkStyleAndGetAnimatedValues","__getAnimatedValue","__attach","__addChild","__detach","__removeChild","__makeNative","__getNativeConfig","styleConfig","styleKey","__getNativeTag","validateStyles","type"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport AnimatedNode from './AnimatedNode';\nimport AnimatedTransform from './AnimatedTransform';\nimport AnimatedWithChildren from './AnimatedWithChildren';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport StyleSheet from '../../../../exports/StyleSheet';\nvar flattenStyle = StyleSheet.flatten;\n\nclass AnimatedStyle extends AnimatedWithChildren {\n  constructor(style) {\n    super();\n    style = flattenStyle(style) || {};\n\n    if (style.transform) {\n      style = _objectSpread(_objectSpread({}, style), {}, {\n        transform: new AnimatedTransform(style.transform)\n      });\n    }\n\n    this._style = style;\n  } // Recursively get values for nested styles (like iOS's shadowOffset)\n\n\n  _walkStyleAndGetValues(style) {\n    var updatedStyle = {};\n\n    for (var key in style) {\n      var value = style[key];\n\n      if (value instanceof AnimatedNode) {\n        if (!value.__isNative) {\n          // We cannot use value of natively driven nodes this way as the value we have access from\n          // JS may not be up to date.\n          updatedStyle[key] = value.__getValue();\n        }\n      } else if (value && !Array.isArray(value) && typeof value === 'object') {\n        // Support animating nested values (for example: shadowOffset.height)\n        updatedStyle[key] = this._walkStyleAndGetValues(value);\n      } else {\n        updatedStyle[key] = value;\n      }\n    }\n\n    return updatedStyle;\n  }\n\n  __getValue() {\n    return this._walkStyleAndGetValues(this._style);\n  } // Recursively get animated values for nested styles (like iOS's shadowOffset)\n\n\n  _walkStyleAndGetAnimatedValues(style) {\n    var updatedStyle = {};\n\n    for (var key in style) {\n      var value = style[key];\n\n      if (value instanceof AnimatedNode) {\n        updatedStyle[key] = value.__getAnimatedValue();\n      } else if (value && !Array.isArray(value) && typeof value === 'object') {\n        // Support animating nested values (for example: shadowOffset.height)\n        updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);\n      }\n    }\n\n    return updatedStyle;\n  }\n\n  __getAnimatedValue() {\n    return this._walkStyleAndGetAnimatedValues(this._style);\n  }\n\n  __attach() {\n    for (var key in this._style) {\n      var value = this._style[key];\n\n      if (value instanceof AnimatedNode) {\n        value.__addChild(this);\n      }\n    }\n  }\n\n  __detach() {\n    for (var key in this._style) {\n      var value = this._style[key];\n\n      if (value instanceof AnimatedNode) {\n        value.__removeChild(this);\n      }\n    }\n\n    super.__detach();\n  }\n\n  __makeNative() {\n    for (var key in this._style) {\n      var value = this._style[key];\n\n      if (value instanceof AnimatedNode) {\n        value.__makeNative();\n      }\n    }\n\n    super.__makeNative();\n  }\n\n  __getNativeConfig() {\n    var styleConfig = {};\n\n    for (var styleKey in this._style) {\n      if (this._style[styleKey] instanceof AnimatedNode) {\n        var style = this._style[styleKey];\n\n        style.__makeNative();\n\n        styleConfig[styleKey] = style.__getNativeTag();\n      } // Non-animated styles are set using `setNativeProps`, no need\n      // to pass those as a part of the node config\n\n    }\n\n    NativeAnimatedHelper.validateStyles(styleConfig);\n    return {\n      type: 'style',\n      style: styleConfig\n    };\n  }\n\n}\n\nexport default AnimatedStyle;"]},"metadata":{},"sourceType":"module"}