{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport AnimatedValue from '../nodes/AnimatedValue';\nimport AnimatedValueXY from '../nodes/AnimatedValueXY';\nimport AnimatedInterpolation from '../nodes/AnimatedInterpolation';\nimport Animation from './Animation';\nimport SpringConfig from '../SpringConfig';\nimport invariant from 'fbjs/lib/invariant';\nimport { shouldUseNativeDriver } from '../NativeAnimatedHelper';\n\nclass SpringAnimation extends Animation {\n  constructor(config) {\n    var _config$overshootClam, _config$restDisplacem, _config$restSpeedThre, _config$velocity, _config$velocity2, _config$delay, _config$isInteraction, _config$iterations;\n\n    super();\n    this._overshootClamping = (_config$overshootClam = config.overshootClamping) !== null && _config$overshootClam !== void 0 ? _config$overshootClam : false;\n    this._restDisplacementThreshold = (_config$restDisplacem = config.restDisplacementThreshold) !== null && _config$restDisplacem !== void 0 ? _config$restDisplacem : 0.001;\n    this._restSpeedThreshold = (_config$restSpeedThre = config.restSpeedThreshold) !== null && _config$restSpeedThre !== void 0 ? _config$restSpeedThre : 0.001;\n    this._initialVelocity = (_config$velocity = config.velocity) !== null && _config$velocity !== void 0 ? _config$velocity : 0;\n    this._lastVelocity = (_config$velocity2 = config.velocity) !== null && _config$velocity2 !== void 0 ? _config$velocity2 : 0;\n    this._toValue = config.toValue;\n    this._delay = (_config$delay = config.delay) !== null && _config$delay !== void 0 ? _config$delay : 0;\n    this._useNativeDriver = shouldUseNativeDriver(config);\n    this.__isInteraction = (_config$isInteraction = config.isInteraction) !== null && _config$isInteraction !== void 0 ? _config$isInteraction : !this._useNativeDriver;\n    this.__iterations = (_config$iterations = config.iterations) !== null && _config$iterations !== void 0 ? _config$iterations : 1;\n\n    if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {\n      var _config$stiffness, _config$damping, _config$mass;\n\n      invariant(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n      this._stiffness = (_config$stiffness = config.stiffness) !== null && _config$stiffness !== void 0 ? _config$stiffness : 100;\n      this._damping = (_config$damping = config.damping) !== null && _config$damping !== void 0 ? _config$damping : 10;\n      this._mass = (_config$mass = config.mass) !== null && _config$mass !== void 0 ? _config$mass : 1;\n    } else if (config.bounciness !== undefined || config.speed !== undefined) {\n      var _config$bounciness, _config$speed; // Convert the origami bounciness/speed values to stiffness/damping\n      // We assume mass is 1.\n\n\n      invariant(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n      var springConfig = SpringConfig.fromBouncinessAndSpeed((_config$bounciness = config.bounciness) !== null && _config$bounciness !== void 0 ? _config$bounciness : 8, (_config$speed = config.speed) !== null && _config$speed !== void 0 ? _config$speed : 12);\n      this._stiffness = springConfig.stiffness;\n      this._damping = springConfig.damping;\n      this._mass = 1;\n    } else {\n      var _config$tension, _config$friction; // Convert the origami tension/friction values to stiffness/damping\n      // We assume mass is 1.\n\n\n      var _springConfig = SpringConfig.fromOrigamiTensionAndFriction((_config$tension = config.tension) !== null && _config$tension !== void 0 ? _config$tension : 40, (_config$friction = config.friction) !== null && _config$friction !== void 0 ? _config$friction : 7);\n\n      this._stiffness = _springConfig.stiffness;\n      this._damping = _springConfig.damping;\n      this._mass = 1;\n    }\n\n    invariant(this._stiffness > 0, 'Stiffness value must be greater than 0');\n    invariant(this._damping > 0, 'Damping value must be greater than 0');\n    invariant(this._mass > 0, 'Mass value must be greater than 0');\n  }\n\n  __getNativeAnimationConfig() {\n    var _this$_initialVelocit;\n\n    return {\n      type: 'spring',\n      overshootClamping: this._overshootClamping,\n      restDisplacementThreshold: this._restDisplacementThreshold,\n      restSpeedThreshold: this._restSpeedThreshold,\n      stiffness: this._stiffness,\n      damping: this._damping,\n      mass: this._mass,\n      initialVelocity: (_this$_initialVelocit = this._initialVelocity) !== null && _this$_initialVelocit !== void 0 ? _this$_initialVelocit : this._lastVelocity,\n      toValue: this._toValue,\n      iterations: this.__iterations\n    };\n  }\n\n  start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {\n    this.__active = true;\n    this._startPosition = fromValue;\n    this._lastPosition = this._startPosition;\n    this._onUpdate = onUpdate;\n    this.__onEnd = onEnd;\n    this._lastTime = Date.now();\n    this._frameTime = 0.0;\n\n    if (previousAnimation instanceof SpringAnimation) {\n      var internalState = previousAnimation.getInternalState();\n      this._lastPosition = internalState.lastPosition;\n      this._lastVelocity = internalState.lastVelocity; // Set the initial velocity to the last velocity\n\n      this._initialVelocity = this._lastVelocity;\n      this._lastTime = internalState.lastTime;\n    }\n\n    var start = () => {\n      if (this._useNativeDriver) {\n        this.__startNativeAnimation(animatedValue);\n      } else {\n        this.onUpdate();\n      }\n    }; //  If this._delay is more than 0, we start after the timeout.\n\n\n    if (this._delay) {\n      this._timeout = setTimeout(start, this._delay);\n    } else {\n      start();\n    }\n  }\n\n  getInternalState() {\n    return {\n      lastPosition: this._lastPosition,\n      lastVelocity: this._lastVelocity,\n      lastTime: this._lastTime\n    };\n  }\n  /**\n   * This spring model is based off of a damped harmonic oscillator\n   * (https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator).\n   *\n   * We use the closed form of the second order differential equation:\n   *\n   * x'' + (2ζ⍵_0)x' + ⍵^2x = 0\n   *\n   * where\n   *    ⍵_0 = √(k / m) (undamped angular frequency of the oscillator),\n   *    ζ = c / 2√mk (damping ratio),\n   *    c = damping constant\n   *    k = stiffness\n   *    m = mass\n   *\n   * The derivation of the closed form is described in detail here:\n   * http://planetmath.org/sites/default/files/texpdf/39745.pdf\n   *\n   * This algorithm happens to match the algorithm used by CASpringAnimation,\n   * a QuartzCore (iOS) API that creates spring animations.\n   */\n\n\n  onUpdate() {\n    // If for some reason we lost a lot of frames (e.g. process large payload or\n    // stopped in the debugger), we only advance by 4 frames worth of\n    // computation and will continue on the next frame. It's better to have it\n    // running at faster speed than jumping to the end.\n    var MAX_STEPS = 64;\n    var now = Date.now();\n\n    if (now > this._lastTime + MAX_STEPS) {\n      now = this._lastTime + MAX_STEPS;\n    }\n\n    var deltaTime = (now - this._lastTime) / 1000;\n    this._frameTime += deltaTime;\n    var c = this._damping;\n    var m = this._mass;\n    var k = this._stiffness;\n    var v0 = -this._initialVelocity;\n    var zeta = c / (2 * Math.sqrt(k * m)); // damping ratio\n\n    var omega0 = Math.sqrt(k / m); // undamped angular frequency of the oscillator (rad/ms)\n\n    var omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta); // exponential decay\n\n    var x0 = this._toValue - this._startPosition; // calculate the oscillation from x0 = 1 to x = 0\n\n    var position = 0.0;\n    var velocity = 0.0;\n    var t = this._frameTime;\n\n    if (zeta < 1) {\n      // Under damped\n      var envelope = Math.exp(-zeta * omega0 * t);\n      position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t)); // This looks crazy -- it's actually just the derivative of the\n      // oscillation function\n\n      velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));\n    } else {\n      // Critically damped\n      var _envelope = Math.exp(-omega0 * t);\n\n      position = this._toValue - _envelope * (x0 + (v0 + omega0 * x0) * t);\n      velocity = _envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));\n    }\n\n    this._lastTime = now;\n    this._lastPosition = position;\n    this._lastVelocity = velocity;\n\n    this._onUpdate(position);\n\n    if (!this.__active) {\n      // a listener might have stopped us in _onUpdate\n      return;\n    } // Conditions for stopping the spring animation\n\n\n    var isOvershooting = false;\n\n    if (this._overshootClamping && this._stiffness !== 0) {\n      if (this._startPosition < this._toValue) {\n        isOvershooting = position > this._toValue;\n      } else {\n        isOvershooting = position < this._toValue;\n      }\n    }\n\n    var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;\n\n    var isDisplacement = true;\n\n    if (this._stiffness !== 0) {\n      isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;\n    }\n\n    if (isOvershooting || isVelocity && isDisplacement) {\n      if (this._stiffness !== 0) {\n        // Ensure that we end up with a round value\n        this._lastPosition = this._toValue;\n        this._lastVelocity = 0;\n\n        this._onUpdate(this._toValue);\n      }\n\n      this.__debouncedOnEnd({\n        finished: true\n      });\n\n      return;\n    }\n\n    this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));\n  }\n\n  stop() {\n    super.stop();\n    this.__active = false;\n    clearTimeout(this._timeout);\n    global.cancelAnimationFrame(this._animationFrame);\n\n    this.__debouncedOnEnd({\n      finished: false\n    });\n  }\n\n}\n\nexport default SpringAnimation;","map":{"version":3,"sources":["C:/Users/alex/Documents/GitHub/alexfox-portfolio/node_modules/react-native-web/dist/vendor/react-native/Animated/animations/SpringAnimation.js"],"names":["AnimatedValue","AnimatedValueXY","AnimatedInterpolation","Animation","SpringConfig","invariant","shouldUseNativeDriver","SpringAnimation","constructor","config","_config$overshootClam","_config$restDisplacem","_config$restSpeedThre","_config$velocity","_config$velocity2","_config$delay","_config$isInteraction","_config$iterations","_overshootClamping","overshootClamping","_restDisplacementThreshold","restDisplacementThreshold","_restSpeedThreshold","restSpeedThreshold","_initialVelocity","velocity","_lastVelocity","_toValue","toValue","_delay","delay","_useNativeDriver","__isInteraction","isInteraction","__iterations","iterations","stiffness","undefined","damping","mass","_config$stiffness","_config$damping","_config$mass","bounciness","speed","tension","friction","_stiffness","_damping","_mass","_config$bounciness","_config$speed","springConfig","fromBouncinessAndSpeed","_config$tension","_config$friction","_springConfig","fromOrigamiTensionAndFriction","__getNativeAnimationConfig","_this$_initialVelocit","type","initialVelocity","start","fromValue","onUpdate","onEnd","previousAnimation","animatedValue","__active","_startPosition","_lastPosition","_onUpdate","__onEnd","_lastTime","Date","now","_frameTime","internalState","getInternalState","lastPosition","lastVelocity","lastTime","__startNativeAnimation","_timeout","setTimeout","MAX_STEPS","deltaTime","c","m","k","v0","zeta","Math","sqrt","omega0","omega1","x0","position","t","envelope","exp","sin","cos","_envelope","isOvershooting","isVelocity","abs","isDisplacement","__debouncedOnEnd","finished","_animationFrame","requestAnimationFrame","bind","stop","clearTimeout","global","cancelAnimationFrame"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport AnimatedValue from '../nodes/AnimatedValue';\nimport AnimatedValueXY from '../nodes/AnimatedValueXY';\nimport AnimatedInterpolation from '../nodes/AnimatedInterpolation';\nimport Animation from './Animation';\nimport SpringConfig from '../SpringConfig';\nimport invariant from 'fbjs/lib/invariant';\nimport { shouldUseNativeDriver } from '../NativeAnimatedHelper';\n\nclass SpringAnimation extends Animation {\n  constructor(config) {\n    var _config$overshootClam, _config$restDisplacem, _config$restSpeedThre, _config$velocity, _config$velocity2, _config$delay, _config$isInteraction, _config$iterations;\n\n    super();\n    this._overshootClamping = (_config$overshootClam = config.overshootClamping) !== null && _config$overshootClam !== void 0 ? _config$overshootClam : false;\n    this._restDisplacementThreshold = (_config$restDisplacem = config.restDisplacementThreshold) !== null && _config$restDisplacem !== void 0 ? _config$restDisplacem : 0.001;\n    this._restSpeedThreshold = (_config$restSpeedThre = config.restSpeedThreshold) !== null && _config$restSpeedThre !== void 0 ? _config$restSpeedThre : 0.001;\n    this._initialVelocity = (_config$velocity = config.velocity) !== null && _config$velocity !== void 0 ? _config$velocity : 0;\n    this._lastVelocity = (_config$velocity2 = config.velocity) !== null && _config$velocity2 !== void 0 ? _config$velocity2 : 0;\n    this._toValue = config.toValue;\n    this._delay = (_config$delay = config.delay) !== null && _config$delay !== void 0 ? _config$delay : 0;\n    this._useNativeDriver = shouldUseNativeDriver(config);\n    this.__isInteraction = (_config$isInteraction = config.isInteraction) !== null && _config$isInteraction !== void 0 ? _config$isInteraction : !this._useNativeDriver;\n    this.__iterations = (_config$iterations = config.iterations) !== null && _config$iterations !== void 0 ? _config$iterations : 1;\n\n    if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {\n      var _config$stiffness, _config$damping, _config$mass;\n\n      invariant(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n      this._stiffness = (_config$stiffness = config.stiffness) !== null && _config$stiffness !== void 0 ? _config$stiffness : 100;\n      this._damping = (_config$damping = config.damping) !== null && _config$damping !== void 0 ? _config$damping : 10;\n      this._mass = (_config$mass = config.mass) !== null && _config$mass !== void 0 ? _config$mass : 1;\n    } else if (config.bounciness !== undefined || config.speed !== undefined) {\n      var _config$bounciness, _config$speed;\n\n      // Convert the origami bounciness/speed values to stiffness/damping\n      // We assume mass is 1.\n      invariant(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n      var springConfig = SpringConfig.fromBouncinessAndSpeed((_config$bounciness = config.bounciness) !== null && _config$bounciness !== void 0 ? _config$bounciness : 8, (_config$speed = config.speed) !== null && _config$speed !== void 0 ? _config$speed : 12);\n      this._stiffness = springConfig.stiffness;\n      this._damping = springConfig.damping;\n      this._mass = 1;\n    } else {\n      var _config$tension, _config$friction;\n\n      // Convert the origami tension/friction values to stiffness/damping\n      // We assume mass is 1.\n      var _springConfig = SpringConfig.fromOrigamiTensionAndFriction((_config$tension = config.tension) !== null && _config$tension !== void 0 ? _config$tension : 40, (_config$friction = config.friction) !== null && _config$friction !== void 0 ? _config$friction : 7);\n\n      this._stiffness = _springConfig.stiffness;\n      this._damping = _springConfig.damping;\n      this._mass = 1;\n    }\n\n    invariant(this._stiffness > 0, 'Stiffness value must be greater than 0');\n    invariant(this._damping > 0, 'Damping value must be greater than 0');\n    invariant(this._mass > 0, 'Mass value must be greater than 0');\n  }\n\n  __getNativeAnimationConfig() {\n    var _this$_initialVelocit;\n\n    return {\n      type: 'spring',\n      overshootClamping: this._overshootClamping,\n      restDisplacementThreshold: this._restDisplacementThreshold,\n      restSpeedThreshold: this._restSpeedThreshold,\n      stiffness: this._stiffness,\n      damping: this._damping,\n      mass: this._mass,\n      initialVelocity: (_this$_initialVelocit = this._initialVelocity) !== null && _this$_initialVelocit !== void 0 ? _this$_initialVelocit : this._lastVelocity,\n      toValue: this._toValue,\n      iterations: this.__iterations\n    };\n  }\n\n  start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {\n    this.__active = true;\n    this._startPosition = fromValue;\n    this._lastPosition = this._startPosition;\n    this._onUpdate = onUpdate;\n    this.__onEnd = onEnd;\n    this._lastTime = Date.now();\n    this._frameTime = 0.0;\n\n    if (previousAnimation instanceof SpringAnimation) {\n      var internalState = previousAnimation.getInternalState();\n      this._lastPosition = internalState.lastPosition;\n      this._lastVelocity = internalState.lastVelocity; // Set the initial velocity to the last velocity\n\n      this._initialVelocity = this._lastVelocity;\n      this._lastTime = internalState.lastTime;\n    }\n\n    var start = () => {\n      if (this._useNativeDriver) {\n        this.__startNativeAnimation(animatedValue);\n      } else {\n        this.onUpdate();\n      }\n    }; //  If this._delay is more than 0, we start after the timeout.\n\n\n    if (this._delay) {\n      this._timeout = setTimeout(start, this._delay);\n    } else {\n      start();\n    }\n  }\n\n  getInternalState() {\n    return {\n      lastPosition: this._lastPosition,\n      lastVelocity: this._lastVelocity,\n      lastTime: this._lastTime\n    };\n  }\n  /**\n   * This spring model is based off of a damped harmonic oscillator\n   * (https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator).\n   *\n   * We use the closed form of the second order differential equation:\n   *\n   * x'' + (2ζ⍵_0)x' + ⍵^2x = 0\n   *\n   * where\n   *    ⍵_0 = √(k / m) (undamped angular frequency of the oscillator),\n   *    ζ = c / 2√mk (damping ratio),\n   *    c = damping constant\n   *    k = stiffness\n   *    m = mass\n   *\n   * The derivation of the closed form is described in detail here:\n   * http://planetmath.org/sites/default/files/texpdf/39745.pdf\n   *\n   * This algorithm happens to match the algorithm used by CASpringAnimation,\n   * a QuartzCore (iOS) API that creates spring animations.\n   */\n\n\n  onUpdate() {\n    // If for some reason we lost a lot of frames (e.g. process large payload or\n    // stopped in the debugger), we only advance by 4 frames worth of\n    // computation and will continue on the next frame. It's better to have it\n    // running at faster speed than jumping to the end.\n    var MAX_STEPS = 64;\n    var now = Date.now();\n\n    if (now > this._lastTime + MAX_STEPS) {\n      now = this._lastTime + MAX_STEPS;\n    }\n\n    var deltaTime = (now - this._lastTime) / 1000;\n    this._frameTime += deltaTime;\n    var c = this._damping;\n    var m = this._mass;\n    var k = this._stiffness;\n    var v0 = -this._initialVelocity;\n    var zeta = c / (2 * Math.sqrt(k * m)); // damping ratio\n\n    var omega0 = Math.sqrt(k / m); // undamped angular frequency of the oscillator (rad/ms)\n\n    var omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta); // exponential decay\n\n    var x0 = this._toValue - this._startPosition; // calculate the oscillation from x0 = 1 to x = 0\n\n    var position = 0.0;\n    var velocity = 0.0;\n    var t = this._frameTime;\n\n    if (zeta < 1) {\n      // Under damped\n      var envelope = Math.exp(-zeta * omega0 * t);\n      position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t)); // This looks crazy -- it's actually just the derivative of the\n      // oscillation function\n\n      velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));\n    } else {\n      // Critically damped\n      var _envelope = Math.exp(-omega0 * t);\n\n      position = this._toValue - _envelope * (x0 + (v0 + omega0 * x0) * t);\n      velocity = _envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));\n    }\n\n    this._lastTime = now;\n    this._lastPosition = position;\n    this._lastVelocity = velocity;\n\n    this._onUpdate(position);\n\n    if (!this.__active) {\n      // a listener might have stopped us in _onUpdate\n      return;\n    } // Conditions for stopping the spring animation\n\n\n    var isOvershooting = false;\n\n    if (this._overshootClamping && this._stiffness !== 0) {\n      if (this._startPosition < this._toValue) {\n        isOvershooting = position > this._toValue;\n      } else {\n        isOvershooting = position < this._toValue;\n      }\n    }\n\n    var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;\n\n    var isDisplacement = true;\n\n    if (this._stiffness !== 0) {\n      isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;\n    }\n\n    if (isOvershooting || isVelocity && isDisplacement) {\n      if (this._stiffness !== 0) {\n        // Ensure that we end up with a round value\n        this._lastPosition = this._toValue;\n        this._lastVelocity = 0;\n\n        this._onUpdate(this._toValue);\n      }\n\n      this.__debouncedOnEnd({\n        finished: true\n      });\n\n      return;\n    }\n\n    this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));\n  }\n\n  stop() {\n    super.stop();\n    this.__active = false;\n    clearTimeout(this._timeout);\n    global.cancelAnimationFrame(this._animationFrame);\n\n    this.__debouncedOnEnd({\n      finished: false\n    });\n  }\n\n}\n\nexport default SpringAnimation;"]},"metadata":{},"sourceType":"module"}