{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport AnimatedNode from './AnimatedNode';\nimport AnimatedWithChildren from './AnimatedWithChildren';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\n\nclass AnimatedTransform extends AnimatedWithChildren {\n  constructor(transforms) {\n    super();\n    this._transforms = transforms;\n  }\n\n  __makeNative() {\n    this._transforms.forEach(transform => {\n      for (var key in transform) {\n        var value = transform[key];\n\n        if (value instanceof AnimatedNode) {\n          value.__makeNative();\n        }\n      }\n    });\n\n    super.__makeNative();\n  }\n\n  __getValue() {\n    return this._transforms.map(transform => {\n      var result = {};\n\n      for (var key in transform) {\n        var value = transform[key];\n\n        if (value instanceof AnimatedNode) {\n          result[key] = value.__getValue();\n        } else {\n          result[key] = value;\n        }\n      }\n\n      return result;\n    });\n  }\n\n  __getAnimatedValue() {\n    return this._transforms.map(transform => {\n      var result = {};\n\n      for (var key in transform) {\n        var value = transform[key];\n\n        if (value instanceof AnimatedNode) {\n          result[key] = value.__getAnimatedValue();\n        } else {\n          // All transform components needed to recompose matrix\n          result[key] = value;\n        }\n      }\n\n      return result;\n    });\n  }\n\n  __attach() {\n    this._transforms.forEach(transform => {\n      for (var key in transform) {\n        var value = transform[key];\n\n        if (value instanceof AnimatedNode) {\n          value.__addChild(this);\n        }\n      }\n    });\n  }\n\n  __detach() {\n    this._transforms.forEach(transform => {\n      for (var key in transform) {\n        var value = transform[key];\n\n        if (value instanceof AnimatedNode) {\n          value.__removeChild(this);\n        }\n      }\n    });\n\n    super.__detach();\n  }\n\n  __getNativeConfig() {\n    var transConfigs = [];\n\n    this._transforms.forEach(transform => {\n      for (var key in transform) {\n        var value = transform[key];\n\n        if (value instanceof AnimatedNode) {\n          transConfigs.push({\n            type: 'animated',\n            property: key,\n            nodeTag: value.__getNativeTag()\n          });\n        } else {\n          transConfigs.push({\n            type: 'static',\n            property: key,\n            value: NativeAnimatedHelper.transformDataType(value)\n          });\n        }\n      }\n    });\n\n    NativeAnimatedHelper.validateTransform(transConfigs);\n    return {\n      type: 'transform',\n      transforms: transConfigs\n    };\n  }\n\n}\n\nexport default AnimatedTransform;","map":{"version":3,"sources":["C:/Users/alex/Documents/GitHub/alexfox-portfolio/node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedTransform.js"],"names":["AnimatedNode","AnimatedWithChildren","NativeAnimatedHelper","AnimatedTransform","constructor","transforms","_transforms","__makeNative","forEach","transform","key","value","__getValue","map","result","__getAnimatedValue","__attach","__addChild","__detach","__removeChild","__getNativeConfig","transConfigs","push","type","property","nodeTag","__getNativeTag","transformDataType","validateTransform"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport AnimatedNode from './AnimatedNode';\nimport AnimatedWithChildren from './AnimatedWithChildren';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\n\nclass AnimatedTransform extends AnimatedWithChildren {\n  constructor(transforms) {\n    super();\n    this._transforms = transforms;\n  }\n\n  __makeNative() {\n    this._transforms.forEach(transform => {\n      for (var key in transform) {\n        var value = transform[key];\n\n        if (value instanceof AnimatedNode) {\n          value.__makeNative();\n        }\n      }\n    });\n\n    super.__makeNative();\n  }\n\n  __getValue() {\n    return this._transforms.map(transform => {\n      var result = {};\n\n      for (var key in transform) {\n        var value = transform[key];\n\n        if (value instanceof AnimatedNode) {\n          result[key] = value.__getValue();\n        } else {\n          result[key] = value;\n        }\n      }\n\n      return result;\n    });\n  }\n\n  __getAnimatedValue() {\n    return this._transforms.map(transform => {\n      var result = {};\n\n      for (var key in transform) {\n        var value = transform[key];\n\n        if (value instanceof AnimatedNode) {\n          result[key] = value.__getAnimatedValue();\n        } else {\n          // All transform components needed to recompose matrix\n          result[key] = value;\n        }\n      }\n\n      return result;\n    });\n  }\n\n  __attach() {\n    this._transforms.forEach(transform => {\n      for (var key in transform) {\n        var value = transform[key];\n\n        if (value instanceof AnimatedNode) {\n          value.__addChild(this);\n        }\n      }\n    });\n  }\n\n  __detach() {\n    this._transforms.forEach(transform => {\n      for (var key in transform) {\n        var value = transform[key];\n\n        if (value instanceof AnimatedNode) {\n          value.__removeChild(this);\n        }\n      }\n    });\n\n    super.__detach();\n  }\n\n  __getNativeConfig() {\n    var transConfigs = [];\n\n    this._transforms.forEach(transform => {\n      for (var key in transform) {\n        var value = transform[key];\n\n        if (value instanceof AnimatedNode) {\n          transConfigs.push({\n            type: 'animated',\n            property: key,\n            nodeTag: value.__getNativeTag()\n          });\n        } else {\n          transConfigs.push({\n            type: 'static',\n            property: key,\n            value: NativeAnimatedHelper.transformDataType(value)\n          });\n        }\n      }\n    });\n\n    NativeAnimatedHelper.validateTransform(transConfigs);\n    return {\n      type: 'transform',\n      transforms: transConfigs\n    };\n  }\n\n}\n\nexport default AnimatedTransform;"]},"metadata":{},"sourceType":"module"}