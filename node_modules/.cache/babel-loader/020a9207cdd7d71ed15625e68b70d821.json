{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nvar startNativeAnimationNextId = 1; // Important note: start() and stop() will only be called at most once.\n// Once an animation has been stopped or finished its course, it will\n// not be reused.\n\nclass Animation {\n  start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}\n\n  stop() {\n    if (this.__nativeId) {\n      NativeAnimatedHelper.API.stopAnimation(this.__nativeId);\n    }\n  }\n\n  __getNativeAnimationConfig() {\n    // Subclasses that have corresponding animation implementation done in native\n    // should override this method\n    throw new Error('This animation type cannot be offloaded to native');\n  } // Helper function for subclasses to make sure onEnd is only called once.\n\n\n  __debouncedOnEnd(result) {\n    var onEnd = this.__onEnd;\n    this.__onEnd = null;\n    onEnd && onEnd(result);\n  }\n\n  __startNativeAnimation(animatedValue) {\n    var startNativeAnimationWaitId = startNativeAnimationNextId + \":startAnimation\";\n    startNativeAnimationNextId += 1;\n    NativeAnimatedHelper.API.setWaitingForIdentifier(startNativeAnimationWaitId);\n\n    try {\n      animatedValue.__makeNative();\n\n      this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();\n      NativeAnimatedHelper.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));\n    } catch (e) {\n      throw e;\n    } finally {\n      NativeAnimatedHelper.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);\n    }\n  }\n\n}\n\nexport default Animation;","map":{"version":3,"sources":["C:/Users/alex/Documents/GitHub/alexfox-portfolio/node_modules/react-native-web/dist/vendor/react-native/Animated/animations/Animation.js"],"names":["NativeAnimatedHelper","startNativeAnimationNextId","Animation","start","fromValue","onUpdate","onEnd","previousAnimation","animatedValue","stop","__nativeId","API","stopAnimation","__getNativeAnimationConfig","Error","__debouncedOnEnd","result","__onEnd","__startNativeAnimation","startNativeAnimationWaitId","setWaitingForIdentifier","__makeNative","generateNewAnimationId","startAnimatingNode","__getNativeTag","bind","e","unsetWaitingForIdentifier"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,oBAAP,MAAiC,yBAAjC;AACA,IAAIC,0BAA0B,GAAG,CAAjC,C,CAAoC;AACpC;AACA;;AAEA,MAAMC,SAAN,CAAgB;AACdC,EAAAA,KAAK,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,KAAtB,EAA6BC,iBAA7B,EAAgDC,aAAhD,EAA+D,CAAE;;AAEtEC,EAAAA,IAAI,GAAG;AACL,QAAI,KAAKC,UAAT,EAAqB;AACnBV,MAAAA,oBAAoB,CAACW,GAArB,CAAyBC,aAAzB,CAAuC,KAAKF,UAA5C;AACD;AACF;;AAEDG,EAAAA,0BAA0B,GAAG;AAC3B;AACA;AACA,UAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;AACD,GAba,CAaZ;;;AAGFC,EAAAA,gBAAgB,CAACC,MAAD,EAAS;AACvB,QAAIV,KAAK,GAAG,KAAKW,OAAjB;AACA,SAAKA,OAAL,GAAe,IAAf;AACAX,IAAAA,KAAK,IAAIA,KAAK,CAACU,MAAD,CAAd;AACD;;AAEDE,EAAAA,sBAAsB,CAACV,aAAD,EAAgB;AACpC,QAAIW,0BAA0B,GAAGlB,0BAA0B,GAAG,iBAA9D;AACAA,IAAAA,0BAA0B,IAAI,CAA9B;AACAD,IAAAA,oBAAoB,CAACW,GAArB,CAAyBS,uBAAzB,CAAiDD,0BAAjD;;AAEA,QAAI;AACFX,MAAAA,aAAa,CAACa,YAAd;;AAEA,WAAKX,UAAL,GAAkBV,oBAAoB,CAACsB,sBAArB,EAAlB;AACAtB,MAAAA,oBAAoB,CAACW,GAArB,CAAyBY,kBAAzB,CAA4C,KAAKb,UAAjD,EAA6DF,aAAa,CAACgB,cAAd,EAA7D,EAA6F,KAAKX,0BAAL,EAA7F,EAAgI,KAAKE,gBAAL,CAAsBU,IAAtB,CAA2B,IAA3B,CAAhI;AACD,KALD,CAKE,OAAOC,CAAP,EAAU;AACV,YAAMA,CAAN;AACD,KAPD,SAOU;AACR1B,MAAAA,oBAAoB,CAACW,GAArB,CAAyBgB,yBAAzB,CAAmDR,0BAAnD;AACD;AACF;;AArCa;;AAyChB,eAAejB,SAAf","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nvar startNativeAnimationNextId = 1; // Important note: start() and stop() will only be called at most once.\n// Once an animation has been stopped or finished its course, it will\n// not be reused.\n\nclass Animation {\n  start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}\n\n  stop() {\n    if (this.__nativeId) {\n      NativeAnimatedHelper.API.stopAnimation(this.__nativeId);\n    }\n  }\n\n  __getNativeAnimationConfig() {\n    // Subclasses that have corresponding animation implementation done in native\n    // should override this method\n    throw new Error('This animation type cannot be offloaded to native');\n  } // Helper function for subclasses to make sure onEnd is only called once.\n\n\n  __debouncedOnEnd(result) {\n    var onEnd = this.__onEnd;\n    this.__onEnd = null;\n    onEnd && onEnd(result);\n  }\n\n  __startNativeAnimation(animatedValue) {\n    var startNativeAnimationWaitId = startNativeAnimationNextId + \":startAnimation\";\n    startNativeAnimationNextId += 1;\n    NativeAnimatedHelper.API.setWaitingForIdentifier(startNativeAnimationWaitId);\n\n    try {\n      animatedValue.__makeNative();\n\n      this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();\n      NativeAnimatedHelper.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));\n    } catch (e) {\n      throw e;\n    } finally {\n      NativeAnimatedHelper.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);\n    }\n  }\n\n}\n\nexport default Animation;"]},"metadata":{},"sourceType":"module"}