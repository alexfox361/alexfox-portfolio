{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport { AnimatedEvent } from '../AnimatedEvent';\nimport AnimatedNode from './AnimatedNode';\nimport AnimatedStyle from './AnimatedStyle';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport findNodeHandle from '../../../../exports/findNodeHandle';\nimport invariant from 'fbjs/lib/invariant';\n\nclass AnimatedProps extends AnimatedNode {\n  constructor(props, callback) {\n    super();\n\n    if (props.style) {\n      props = _objectSpread(_objectSpread({}, props), {}, {\n        style: new AnimatedStyle(props.style)\n      });\n    }\n\n    this._props = props;\n    this._callback = callback;\n\n    this.__attach();\n  }\n\n  __getValue() {\n    var props = {};\n\n    for (var key in this._props) {\n      var value = this._props[key];\n\n      if (value instanceof AnimatedNode) {\n        if (!value.__isNative || value instanceof AnimatedStyle) {\n          // We cannot use value of natively driven nodes this way as the value we have access from\n          // JS may not be up to date.\n          props[key] = value.__getValue();\n        }\n      } else if (value instanceof AnimatedEvent) {\n        props[key] = value.__getHandler();\n      } else {\n        props[key] = value;\n      }\n    }\n\n    return props;\n  }\n\n  __getAnimatedValue() {\n    var props = {};\n\n    for (var key in this._props) {\n      var value = this._props[key];\n\n      if (value instanceof AnimatedNode) {\n        props[key] = value.__getAnimatedValue();\n      }\n    }\n\n    return props;\n  }\n\n  __attach() {\n    for (var key in this._props) {\n      var value = this._props[key];\n\n      if (value instanceof AnimatedNode) {\n        value.__addChild(this);\n      }\n    }\n  }\n\n  __detach() {\n    if (this.__isNative && this._animatedView) {\n      this.__disconnectAnimatedView();\n    }\n\n    for (var key in this._props) {\n      var value = this._props[key];\n\n      if (value instanceof AnimatedNode) {\n        value.__removeChild(this);\n      }\n    }\n\n    super.__detach();\n  }\n\n  update() {\n    this._callback();\n  }\n\n  __makeNative() {\n    if (!this.__isNative) {\n      this.__isNative = true;\n\n      for (var key in this._props) {\n        var value = this._props[key];\n\n        if (value instanceof AnimatedNode) {\n          value.__makeNative();\n        }\n      }\n\n      if (this._animatedView) {\n        this.__connectAnimatedView();\n      }\n    }\n  }\n\n  setNativeView(animatedView) {\n    if (this._animatedView === animatedView) {\n      return;\n    }\n\n    this._animatedView = animatedView;\n\n    if (this.__isNative) {\n      this.__connectAnimatedView();\n    }\n  }\n\n  __connectAnimatedView() {\n    invariant(this.__isNative, 'Expected node to be marked as \"native\"');\n    var nativeViewTag = findNodeHandle(this._animatedView);\n    invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');\n    NativeAnimatedHelper.API.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);\n  }\n\n  __disconnectAnimatedView() {\n    invariant(this.__isNative, 'Expected node to be marked as \"native\"');\n    var nativeViewTag = findNodeHandle(this._animatedView);\n    invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');\n    NativeAnimatedHelper.API.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);\n  }\n\n  __restoreDefaultValues() {\n    // When using the native driver, view properties need to be restored to\n    // their default values manually since react no longer tracks them. This\n    // is needed to handle cases where a prop driven by native animated is removed\n    // after having been changed natively by an animation.\n    if (this.__isNative) {\n      NativeAnimatedHelper.API.restoreDefaultValues(this.__getNativeTag());\n    }\n  }\n\n  __getNativeConfig() {\n    var propsConfig = {};\n\n    for (var propKey in this._props) {\n      var value = this._props[propKey];\n\n      if (value instanceof AnimatedNode) {\n        value.__makeNative();\n\n        propsConfig[propKey] = value.__getNativeTag();\n      }\n    }\n\n    return {\n      type: 'props',\n      props: propsConfig\n    };\n  }\n\n}\n\nexport default AnimatedProps;","map":{"version":3,"sources":["C:/Users/alex/Documents/GitHub/alexfox-portfolio/node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedProps.js"],"names":["_objectSpread","AnimatedEvent","AnimatedNode","AnimatedStyle","NativeAnimatedHelper","findNodeHandle","invariant","AnimatedProps","constructor","props","callback","style","_props","_callback","__attach","__getValue","key","value","__isNative","__getHandler","__getAnimatedValue","__addChild","__detach","_animatedView","__disconnectAnimatedView","__removeChild","update","__makeNative","__connectAnimatedView","setNativeView","animatedView","nativeViewTag","API","connectAnimatedNodeToView","__getNativeTag","disconnectAnimatedNodeFromView","__restoreDefaultValues","restoreDefaultValues","__getNativeConfig","propsConfig","propKey","type"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport { AnimatedEvent } from '../AnimatedEvent';\nimport AnimatedNode from './AnimatedNode';\nimport AnimatedStyle from './AnimatedStyle';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport findNodeHandle from '../../../../exports/findNodeHandle';\nimport invariant from 'fbjs/lib/invariant';\n\nclass AnimatedProps extends AnimatedNode {\n  constructor(props, callback) {\n    super();\n\n    if (props.style) {\n      props = _objectSpread(_objectSpread({}, props), {}, {\n        style: new AnimatedStyle(props.style)\n      });\n    }\n\n    this._props = props;\n    this._callback = callback;\n\n    this.__attach();\n  }\n\n  __getValue() {\n    var props = {};\n\n    for (var key in this._props) {\n      var value = this._props[key];\n\n      if (value instanceof AnimatedNode) {\n        if (!value.__isNative || value instanceof AnimatedStyle) {\n          // We cannot use value of natively driven nodes this way as the value we have access from\n          // JS may not be up to date.\n          props[key] = value.__getValue();\n        }\n      } else if (value instanceof AnimatedEvent) {\n        props[key] = value.__getHandler();\n      } else {\n        props[key] = value;\n      }\n    }\n\n    return props;\n  }\n\n  __getAnimatedValue() {\n    var props = {};\n\n    for (var key in this._props) {\n      var value = this._props[key];\n\n      if (value instanceof AnimatedNode) {\n        props[key] = value.__getAnimatedValue();\n      }\n    }\n\n    return props;\n  }\n\n  __attach() {\n    for (var key in this._props) {\n      var value = this._props[key];\n\n      if (value instanceof AnimatedNode) {\n        value.__addChild(this);\n      }\n    }\n  }\n\n  __detach() {\n    if (this.__isNative && this._animatedView) {\n      this.__disconnectAnimatedView();\n    }\n\n    for (var key in this._props) {\n      var value = this._props[key];\n\n      if (value instanceof AnimatedNode) {\n        value.__removeChild(this);\n      }\n    }\n\n    super.__detach();\n  }\n\n  update() {\n    this._callback();\n  }\n\n  __makeNative() {\n    if (!this.__isNative) {\n      this.__isNative = true;\n\n      for (var key in this._props) {\n        var value = this._props[key];\n\n        if (value instanceof AnimatedNode) {\n          value.__makeNative();\n        }\n      }\n\n      if (this._animatedView) {\n        this.__connectAnimatedView();\n      }\n    }\n  }\n\n  setNativeView(animatedView) {\n    if (this._animatedView === animatedView) {\n      return;\n    }\n\n    this._animatedView = animatedView;\n\n    if (this.__isNative) {\n      this.__connectAnimatedView();\n    }\n  }\n\n  __connectAnimatedView() {\n    invariant(this.__isNative, 'Expected node to be marked as \"native\"');\n    var nativeViewTag = findNodeHandle(this._animatedView);\n    invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');\n    NativeAnimatedHelper.API.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);\n  }\n\n  __disconnectAnimatedView() {\n    invariant(this.__isNative, 'Expected node to be marked as \"native\"');\n    var nativeViewTag = findNodeHandle(this._animatedView);\n    invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');\n    NativeAnimatedHelper.API.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);\n  }\n\n  __restoreDefaultValues() {\n    // When using the native driver, view properties need to be restored to\n    // their default values manually since react no longer tracks them. This\n    // is needed to handle cases where a prop driven by native animated is removed\n    // after having been changed natively by an animation.\n    if (this.__isNative) {\n      NativeAnimatedHelper.API.restoreDefaultValues(this.__getNativeTag());\n    }\n  }\n\n  __getNativeConfig() {\n    var propsConfig = {};\n\n    for (var propKey in this._props) {\n      var value = this._props[propKey];\n\n      if (value instanceof AnimatedNode) {\n        value.__makeNative();\n\n        propsConfig[propKey] = value.__getNativeTag();\n      }\n    }\n\n    return {\n      type: 'props',\n      props: propsConfig\n    };\n  }\n\n}\n\nexport default AnimatedProps;"]},"metadata":{},"sourceType":"module"}