{"ast":null,"code":"/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from 'fbjs/lib/invariant';\nimport canUseDOM from '../../modules/canUseDom';\nvar dimensions = {\n  window: {\n    fontScale: 1,\n    height: 0,\n    scale: 1,\n    width: 0\n  },\n  screen: {\n    fontScale: 1,\n    height: 0,\n    scale: 1,\n    width: 0\n  }\n};\nvar listeners = {};\nvar shouldInit = canUseDOM;\n\nfunction update() {\n  if (!canUseDOM) {\n    return;\n  }\n\n  var win = window;\n  var docEl = win.document.documentElement;\n  dimensions.window = {\n    fontScale: 1,\n    height: docEl.clientHeight,\n    scale: win.devicePixelRatio || 1,\n    width: docEl.clientWidth\n  };\n  dimensions.screen = {\n    fontScale: 1,\n    height: win.screen.height,\n    scale: win.devicePixelRatio || 1,\n    width: win.screen.width\n  };\n}\n\nfunction handleResize() {\n  update();\n\n  if (Array.isArray(listeners['change'])) {\n    listeners['change'].forEach(handler => handler(dimensions));\n  }\n}\n\nexport default class Dimensions {\n  static get(dimension) {\n    if (shouldInit) {\n      shouldInit = false;\n      update();\n    }\n\n    invariant(dimensions[dimension], \"No dimension set for key \" + dimension);\n    return dimensions[dimension];\n  }\n\n  static set(initialDimensions) {\n    if (initialDimensions) {\n      if (canUseDOM) {\n        invariant(false, 'Dimensions cannot be set in the browser');\n      } else {\n        if (initialDimensions.screen != null) {\n          dimensions.screen = initialDimensions.screen;\n        }\n\n        if (initialDimensions.window != null) {\n          dimensions.window = initialDimensions.window;\n        }\n      }\n    }\n  }\n\n  static addEventListener(type, handler) {\n    listeners[type] = listeners[type] || [];\n    listeners[type].push(handler);\n    return {\n      remove: () => {\n        this.removeEventListener(type, handler);\n      }\n    };\n  }\n\n  static removeEventListener(type, handler) {\n    if (Array.isArray(listeners[type])) {\n      listeners[type] = listeners[type].filter(_handler => _handler !== handler);\n    }\n  }\n\n}\n\nif (canUseDOM) {\n  window.addEventListener('resize', handleResize, false);\n}","map":{"version":3,"sources":["C:/Users/alex/Documents/GitHub/alexfox-portfolio/node_modules/react-native-web/dist/exports/Dimensions/index.js"],"names":["invariant","canUseDOM","dimensions","window","fontScale","height","scale","width","screen","listeners","shouldInit","update","win","docEl","document","documentElement","clientHeight","devicePixelRatio","clientWidth","handleResize","Array","isArray","forEach","handler","Dimensions","get","dimension","set","initialDimensions","addEventListener","type","push","remove","removeEventListener","filter","_handler"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,IAAIC,UAAU,GAAG;AACfC,EAAAA,MAAM,EAAE;AACNC,IAAAA,SAAS,EAAE,CADL;AAENC,IAAAA,MAAM,EAAE,CAFF;AAGNC,IAAAA,KAAK,EAAE,CAHD;AAINC,IAAAA,KAAK,EAAE;AAJD,GADO;AAOfC,EAAAA,MAAM,EAAE;AACNJ,IAAAA,SAAS,EAAE,CADL;AAENC,IAAAA,MAAM,EAAE,CAFF;AAGNC,IAAAA,KAAK,EAAE,CAHD;AAINC,IAAAA,KAAK,EAAE;AAJD;AAPO,CAAjB;AAcA,IAAIE,SAAS,GAAG,EAAhB;AACA,IAAIC,UAAU,GAAGT,SAAjB;;AAEA,SAASU,MAAT,GAAkB;AAChB,MAAI,CAACV,SAAL,EAAgB;AACd;AACD;;AAED,MAAIW,GAAG,GAAGT,MAAV;AACA,MAAIU,KAAK,GAAGD,GAAG,CAACE,QAAJ,CAAaC,eAAzB;AACAb,EAAAA,UAAU,CAACC,MAAX,GAAoB;AAClBC,IAAAA,SAAS,EAAE,CADO;AAElBC,IAAAA,MAAM,EAAEQ,KAAK,CAACG,YAFI;AAGlBV,IAAAA,KAAK,EAAEM,GAAG,CAACK,gBAAJ,IAAwB,CAHb;AAIlBV,IAAAA,KAAK,EAAEM,KAAK,CAACK;AAJK,GAApB;AAMAhB,EAAAA,UAAU,CAACM,MAAX,GAAoB;AAClBJ,IAAAA,SAAS,EAAE,CADO;AAElBC,IAAAA,MAAM,EAAEO,GAAG,CAACJ,MAAJ,CAAWH,MAFD;AAGlBC,IAAAA,KAAK,EAAEM,GAAG,CAACK,gBAAJ,IAAwB,CAHb;AAIlBV,IAAAA,KAAK,EAAEK,GAAG,CAACJ,MAAJ,CAAWD;AAJA,GAApB;AAMD;;AAED,SAASY,YAAT,GAAwB;AACtBR,EAAAA,MAAM;;AAEN,MAAIS,KAAK,CAACC,OAAN,CAAcZ,SAAS,CAAC,QAAD,CAAvB,CAAJ,EAAwC;AACtCA,IAAAA,SAAS,CAAC,QAAD,CAAT,CAAoBa,OAApB,CAA4BC,OAAO,IAAIA,OAAO,CAACrB,UAAD,CAA9C;AACD;AACF;;AAED,eAAe,MAAMsB,UAAN,CAAiB;AACpB,SAAHC,GAAG,CAACC,SAAD,EAAY;AACpB,QAAIhB,UAAJ,EAAgB;AACdA,MAAAA,UAAU,GAAG,KAAb;AACAC,MAAAA,MAAM;AACP;;AAEDX,IAAAA,SAAS,CAACE,UAAU,CAACwB,SAAD,CAAX,EAAwB,8BAA8BA,SAAtD,CAAT;AACA,WAAOxB,UAAU,CAACwB,SAAD,CAAjB;AACD;;AAES,SAAHC,GAAG,CAACC,iBAAD,EAAoB;AAC5B,QAAIA,iBAAJ,EAAuB;AACrB,UAAI3B,SAAJ,EAAe;AACbD,QAAAA,SAAS,CAAC,KAAD,EAAQ,yCAAR,CAAT;AACD,OAFD,MAEO;AACL,YAAI4B,iBAAiB,CAACpB,MAAlB,IAA4B,IAAhC,EAAsC;AACpCN,UAAAA,UAAU,CAACM,MAAX,GAAoBoB,iBAAiB,CAACpB,MAAtC;AACD;;AAED,YAAIoB,iBAAiB,CAACzB,MAAlB,IAA4B,IAAhC,EAAsC;AACpCD,UAAAA,UAAU,CAACC,MAAX,GAAoByB,iBAAiB,CAACzB,MAAtC;AACD;AACF;AACF;AACF;;AAEsB,SAAhB0B,gBAAgB,CAACC,IAAD,EAAOP,OAAP,EAAgB;AACrCd,IAAAA,SAAS,CAACqB,IAAD,CAAT,GAAkBrB,SAAS,CAACqB,IAAD,CAAT,IAAmB,EAArC;AACArB,IAAAA,SAAS,CAACqB,IAAD,CAAT,CAAgBC,IAAhB,CAAqBR,OAArB;AACA,WAAO;AACLS,MAAAA,MAAM,EAAE,MAAM;AACZ,aAAKC,mBAAL,CAAyBH,IAAzB,EAA+BP,OAA/B;AACD;AAHI,KAAP;AAKD;;AAEyB,SAAnBU,mBAAmB,CAACH,IAAD,EAAOP,OAAP,EAAgB;AACxC,QAAIH,KAAK,CAACC,OAAN,CAAcZ,SAAS,CAACqB,IAAD,CAAvB,CAAJ,EAAoC;AAClCrB,MAAAA,SAAS,CAACqB,IAAD,CAAT,GAAkBrB,SAAS,CAACqB,IAAD,CAAT,CAAgBI,MAAhB,CAAuBC,QAAQ,IAAIA,QAAQ,KAAKZ,OAAhD,CAAlB;AACD;AACF;;AAzC6B;;AA6ChC,IAAItB,SAAJ,EAAe;AACbE,EAAAA,MAAM,CAAC0B,gBAAP,CAAwB,QAAxB,EAAkCV,YAAlC,EAAgD,KAAhD;AACD","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from 'fbjs/lib/invariant';\nimport canUseDOM from '../../modules/canUseDom';\nvar dimensions = {\n  window: {\n    fontScale: 1,\n    height: 0,\n    scale: 1,\n    width: 0\n  },\n  screen: {\n    fontScale: 1,\n    height: 0,\n    scale: 1,\n    width: 0\n  }\n};\nvar listeners = {};\nvar shouldInit = canUseDOM;\n\nfunction update() {\n  if (!canUseDOM) {\n    return;\n  }\n\n  var win = window;\n  var docEl = win.document.documentElement;\n  dimensions.window = {\n    fontScale: 1,\n    height: docEl.clientHeight,\n    scale: win.devicePixelRatio || 1,\n    width: docEl.clientWidth\n  };\n  dimensions.screen = {\n    fontScale: 1,\n    height: win.screen.height,\n    scale: win.devicePixelRatio || 1,\n    width: win.screen.width\n  };\n}\n\nfunction handleResize() {\n  update();\n\n  if (Array.isArray(listeners['change'])) {\n    listeners['change'].forEach(handler => handler(dimensions));\n  }\n}\n\nexport default class Dimensions {\n  static get(dimension) {\n    if (shouldInit) {\n      shouldInit = false;\n      update();\n    }\n\n    invariant(dimensions[dimension], \"No dimension set for key \" + dimension);\n    return dimensions[dimension];\n  }\n\n  static set(initialDimensions) {\n    if (initialDimensions) {\n      if (canUseDOM) {\n        invariant(false, 'Dimensions cannot be set in the browser');\n      } else {\n        if (initialDimensions.screen != null) {\n          dimensions.screen = initialDimensions.screen;\n        }\n\n        if (initialDimensions.window != null) {\n          dimensions.window = initialDimensions.window;\n        }\n      }\n    }\n  }\n\n  static addEventListener(type, handler) {\n    listeners[type] = listeners[type] || [];\n    listeners[type].push(handler);\n    return {\n      remove: () => {\n        this.removeEventListener(type, handler);\n      }\n    };\n  }\n\n  static removeEventListener(type, handler) {\n    if (Array.isArray(listeners[type])) {\n      listeners[type] = listeners[type].filter(_handler => _handler !== handler);\n    }\n  }\n\n}\n\nif (canUseDOM) {\n  window.addEventListener('resize', handleResize, false);\n}"]},"metadata":{},"sourceType":"module"}