{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport invariant from 'fbjs/lib/invariant';\nimport unmountComponentAtNode from '../unmountComponentAtNode';\nimport renderApplication, { getApplication as _getApplication } from './renderApplication';\nvar emptyObject = {};\nvar runnables = {};\n\nvar componentProviderInstrumentationHook = component => component();\n\nvar wrapperComponentProvider;\n/**\n * `AppRegistry` is the JS entry point to running all React Native apps.\n */\n\nexport default class AppRegistry {\n  static getAppKeys() {\n    return Object.keys(runnables);\n  }\n\n  static getApplication(appKey, appParameters) {\n    invariant(runnables[appKey] && runnables[appKey].getApplication, \"Application \" + appKey + \" has not been registered. \" + 'This is either due to an import error during initialization or failure to call AppRegistry.registerComponent.');\n    return runnables[appKey].getApplication(appParameters);\n  }\n\n  static registerComponent(appKey, componentProvider) {\n    runnables[appKey] = {\n      getApplication: appParameters => _getApplication(componentProviderInstrumentationHook(componentProvider), appParameters ? appParameters.initialProps : emptyObject, wrapperComponentProvider && wrapperComponentProvider(appParameters)),\n      run: appParameters => renderApplication(componentProviderInstrumentationHook(componentProvider), wrapperComponentProvider && wrapperComponentProvider(appParameters), appParameters.callback, {\n        hydrate: appParameters.hydrate || false,\n        initialProps: appParameters.initialProps || emptyObject,\n        rootTag: appParameters.rootTag\n      })\n    };\n    return appKey;\n  }\n\n  static registerConfig(config) {\n    config.forEach(_ref => {\n      var appKey = _ref.appKey,\n          component = _ref.component,\n          run = _ref.run;\n\n      if (run) {\n        AppRegistry.registerRunnable(appKey, run);\n      } else {\n        invariant(component, 'No component provider passed in');\n        AppRegistry.registerComponent(appKey, component);\n      }\n    });\n  } // TODO: fix style sheet creation when using this method\n\n\n  static registerRunnable(appKey, run) {\n    runnables[appKey] = {\n      run\n    };\n    return appKey;\n  }\n\n  static runApplication(appKey, appParameters) {\n    var isDevelopment = process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test';\n\n    if (isDevelopment) {\n      var params = _objectSpread({}, appParameters);\n\n      params.rootTag = \"#\" + params.rootTag.id;\n      console.log(\"Running application \\\"\" + appKey + \"\\\" with appParams:\\n\", params, \"\\nDevelopment-level warnings: \" + (isDevelopment ? 'ON' : 'OFF') + \".\" + (\"\\nPerformance optimizations: \" + (isDevelopment ? 'OFF' : 'ON') + \".\"));\n    }\n\n    invariant(runnables[appKey] && runnables[appKey].run, \"Application \\\"\" + appKey + \"\\\" has not been registered. \" + 'This is either due to an import error during initialization or failure to call AppRegistry.registerComponent.');\n    runnables[appKey].run(appParameters);\n  }\n\n  static setComponentProviderInstrumentationHook(hook) {\n    componentProviderInstrumentationHook = hook;\n  }\n\n  static setWrapperComponentProvider(provider) {\n    wrapperComponentProvider = provider;\n  }\n\n  static unmountApplicationComponentAtRootTag(rootTag) {\n    unmountComponentAtNode(rootTag);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/alex/Documents/GitHub/alexfox-portfolio/node_modules/react-native-web/dist/exports/AppRegistry/index.js"],"names":["_objectSpread","invariant","unmountComponentAtNode","renderApplication","getApplication","_getApplication","emptyObject","runnables","componentProviderInstrumentationHook","component","wrapperComponentProvider","AppRegistry","getAppKeys","Object","keys","appKey","appParameters","registerComponent","componentProvider","initialProps","run","callback","hydrate","rootTag","registerConfig","config","forEach","_ref","registerRunnable","runApplication","isDevelopment","process","env","NODE_ENV","params","id","console","log","setComponentProviderInstrumentationHook","hook","setWrapperComponentProvider","provider","unmountApplicationComponentAtRootTag"],"mappings":"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","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\n\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from 'fbjs/lib/invariant';\nimport unmountComponentAtNode from '../unmountComponentAtNode';\nimport renderApplication, { getApplication as _getApplication } from './renderApplication';\nvar emptyObject = {};\nvar runnables = {};\n\nvar componentProviderInstrumentationHook = component => component();\n\nvar wrapperComponentProvider;\n/**\n * `AppRegistry` is the JS entry point to running all React Native apps.\n */\n\nexport default class AppRegistry {\n  static getAppKeys() {\n    return Object.keys(runnables);\n  }\n\n  static getApplication(appKey, appParameters) {\n    invariant(runnables[appKey] && runnables[appKey].getApplication, \"Application \" + appKey + \" has not been registered. \" + 'This is either due to an import error during initialization or failure to call AppRegistry.registerComponent.');\n    return runnables[appKey].getApplication(appParameters);\n  }\n\n  static registerComponent(appKey, componentProvider) {\n    runnables[appKey] = {\n      getApplication: appParameters => _getApplication(componentProviderInstrumentationHook(componentProvider), appParameters ? appParameters.initialProps : emptyObject, wrapperComponentProvider && wrapperComponentProvider(appParameters)),\n      run: appParameters => renderApplication(componentProviderInstrumentationHook(componentProvider), wrapperComponentProvider && wrapperComponentProvider(appParameters), appParameters.callback, {\n        hydrate: appParameters.hydrate || false,\n        initialProps: appParameters.initialProps || emptyObject,\n        rootTag: appParameters.rootTag\n      })\n    };\n    return appKey;\n  }\n\n  static registerConfig(config) {\n    config.forEach(_ref => {\n      var appKey = _ref.appKey,\n          component = _ref.component,\n          run = _ref.run;\n\n      if (run) {\n        AppRegistry.registerRunnable(appKey, run);\n      } else {\n        invariant(component, 'No component provider passed in');\n        AppRegistry.registerComponent(appKey, component);\n      }\n    });\n  } // TODO: fix style sheet creation when using this method\n\n\n  static registerRunnable(appKey, run) {\n    runnables[appKey] = {\n      run\n    };\n    return appKey;\n  }\n\n  static runApplication(appKey, appParameters) {\n    var isDevelopment = process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test';\n\n    if (isDevelopment) {\n      var params = _objectSpread({}, appParameters);\n\n      params.rootTag = \"#\" + params.rootTag.id;\n      console.log(\"Running application \\\"\" + appKey + \"\\\" with appParams:\\n\", params, \"\\nDevelopment-level warnings: \" + (isDevelopment ? 'ON' : 'OFF') + \".\" + (\"\\nPerformance optimizations: \" + (isDevelopment ? 'OFF' : 'ON') + \".\"));\n    }\n\n    invariant(runnables[appKey] && runnables[appKey].run, \"Application \\\"\" + appKey + \"\\\" has not been registered. \" + 'This is either due to an import error during initialization or failure to call AppRegistry.registerComponent.');\n    runnables[appKey].run(appParameters);\n  }\n\n  static setComponentProviderInstrumentationHook(hook) {\n    componentProviderInstrumentationHook = hook;\n  }\n\n  static setWrapperComponentProvider(provider) {\n    wrapperComponentProvider = provider;\n  }\n\n  static unmountApplicationComponentAtRootTag(rootTag) {\n    unmountComponentAtNode(rootTag);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}