{"ast":null,"code":"/**\n * Copyright (c) Nicolas Gallagher\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.localizeStyle = localizeStyle;\nvar cache = new WeakMap();\nvar markerProp = '$$css$localize';\n/**\n * The compiler polyfills logical properties and values, generating a class\n * name for both writing directions. The style objects are annotated by\n * the compiler as needing this runtime transform. The results are memoized.\n *\n * { '$$css$localize': true, float: [ 'float-left', 'float-right' ] }\n * => { float: 'float-left' }\n */\n\nfunction compileStyle(style, isRTL) {\n  // Create a new compiled style for styleq\n  var compiledStyle = {};\n\n  for (var prop in style) {\n    if (prop !== markerProp) {\n      var value = style[prop];\n\n      if (Array.isArray(value)) {\n        compiledStyle[prop] = isRTL ? value[1] : value[0];\n      } else {\n        compiledStyle[prop] = value;\n      }\n    }\n  }\n\n  return compiledStyle;\n}\n\nfunction localizeStyle(style, isRTL) {\n  if (style[markerProp] != null) {\n    var compiledStyleIndex = isRTL ? 1 : 0; // Check the cache in case we've already seen this object\n\n    if (cache.has(style)) {\n      var _cachedStyles = cache.get(style);\n\n      var _compiledStyle = _cachedStyles[compiledStyleIndex];\n\n      if (_compiledStyle == null) {\n        // Update the missing cache entry\n        _compiledStyle = compileStyle(style, isRTL);\n        _cachedStyles[compiledStyleIndex] = _compiledStyle;\n        cache.set(style, _cachedStyles);\n      }\n\n      return _compiledStyle;\n    } // Create a new compiled style for styleq\n\n\n    var compiledStyle = compileStyle(style, isRTL);\n    var cachedStyles = new Array(2);\n    cachedStyles[compiledStyleIndex] = compiledStyle;\n    cache.set(style, cachedStyles);\n    return compiledStyle;\n  }\n\n  return style;\n}","map":{"version":3,"sources":["C:/Users/alex/Documents/GitHub/alexfox-portfolio/node_modules/styleq/dist/transform-localize-style.js"],"names":["Object","defineProperty","exports","value","localizeStyle","cache","WeakMap","markerProp","compileStyle","style","isRTL","compiledStyle","prop","Array","isArray","compiledStyleIndex","has","_cachedStyles","get","_compiledStyle","set","cachedStyles"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,aAAR,GAAwBA,aAAxB;AACA,IAAIC,KAAK,GAAG,IAAIC,OAAJ,EAAZ;AACA,IAAIC,UAAU,GAAG,gBAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,KAA7B,EAAoC;AAClC;AACA,MAAIC,aAAa,GAAG,EAApB;;AAEA,OAAK,IAAIC,IAAT,IAAiBH,KAAjB,EAAwB;AACtB,QAAIG,IAAI,KAAKL,UAAb,EAAyB;AACvB,UAAIJ,KAAK,GAAGM,KAAK,CAACG,IAAD,CAAjB;;AAEA,UAAIC,KAAK,CAACC,OAAN,CAAcX,KAAd,CAAJ,EAA0B;AACxBQ,QAAAA,aAAa,CAACC,IAAD,CAAb,GAAsBF,KAAK,GAAGP,KAAK,CAAC,CAAD,CAAR,GAAcA,KAAK,CAAC,CAAD,CAA9C;AACD,OAFD,MAEO;AACLQ,QAAAA,aAAa,CAACC,IAAD,CAAb,GAAsBT,KAAtB;AACD;AACF;AACF;;AAED,SAAOQ,aAAP;AACD;;AAED,SAASP,aAAT,CAAuBK,KAAvB,EAA8BC,KAA9B,EAAqC;AACnC,MAAID,KAAK,CAACF,UAAD,CAAL,IAAqB,IAAzB,EAA+B;AAC7B,QAAIQ,kBAAkB,GAAGL,KAAK,GAAG,CAAH,GAAO,CAArC,CAD6B,CACW;;AAExC,QAAIL,KAAK,CAACW,GAAN,CAAUP,KAAV,CAAJ,EAAsB;AACpB,UAAIQ,aAAa,GAAGZ,KAAK,CAACa,GAAN,CAAUT,KAAV,CAApB;;AAEA,UAAIU,cAAc,GAAGF,aAAa,CAACF,kBAAD,CAAlC;;AAEA,UAAII,cAAc,IAAI,IAAtB,EAA4B;AAC1B;AACAA,QAAAA,cAAc,GAAGX,YAAY,CAACC,KAAD,EAAQC,KAAR,CAA7B;AACAO,QAAAA,aAAa,CAACF,kBAAD,CAAb,GAAoCI,cAApC;AACAd,QAAAA,KAAK,CAACe,GAAN,CAAUX,KAAV,EAAiBQ,aAAjB;AACD;;AAED,aAAOE,cAAP;AACD,KAhB4B,CAgB3B;;;AAGF,QAAIR,aAAa,GAAGH,YAAY,CAACC,KAAD,EAAQC,KAAR,CAAhC;AACA,QAAIW,YAAY,GAAG,IAAIR,KAAJ,CAAU,CAAV,CAAnB;AACAQ,IAAAA,YAAY,CAACN,kBAAD,CAAZ,GAAmCJ,aAAnC;AACAN,IAAAA,KAAK,CAACe,GAAN,CAAUX,KAAV,EAAiBY,YAAjB;AACA,WAAOV,aAAP;AACD;;AAED,SAAOF,KAAP;AACD","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.localizeStyle = localizeStyle;\nvar cache = new WeakMap();\nvar markerProp = '$$css$localize';\n/**\n * The compiler polyfills logical properties and values, generating a class\n * name for both writing directions. The style objects are annotated by\n * the compiler as needing this runtime transform. The results are memoized.\n *\n * { '$$css$localize': true, float: [ 'float-left', 'float-right' ] }\n * => { float: 'float-left' }\n */\n\nfunction compileStyle(style, isRTL) {\n  // Create a new compiled style for styleq\n  var compiledStyle = {};\n\n  for (var prop in style) {\n    if (prop !== markerProp) {\n      var value = style[prop];\n\n      if (Array.isArray(value)) {\n        compiledStyle[prop] = isRTL ? value[1] : value[0];\n      } else {\n        compiledStyle[prop] = value;\n      }\n    }\n  }\n\n  return compiledStyle;\n}\n\nfunction localizeStyle(style, isRTL) {\n  if (style[markerProp] != null) {\n    var compiledStyleIndex = isRTL ? 1 : 0; // Check the cache in case we've already seen this object\n\n    if (cache.has(style)) {\n      var _cachedStyles = cache.get(style);\n\n      var _compiledStyle = _cachedStyles[compiledStyleIndex];\n\n      if (_compiledStyle == null) {\n        // Update the missing cache entry\n        _compiledStyle = compileStyle(style, isRTL);\n        _cachedStyles[compiledStyleIndex] = _compiledStyle;\n        cache.set(style, _cachedStyles);\n      }\n\n      return _compiledStyle;\n    } // Create a new compiled style for styleq\n\n\n    var compiledStyle = compileStyle(style, isRTL);\n    var cachedStyles = new Array(2);\n    cachedStyles[compiledStyleIndex] = compiledStyle;\n    cache.set(style, cachedStyles);\n    return compiledStyle;\n  }\n\n  return style;\n}"]},"metadata":{},"sourceType":"script"}