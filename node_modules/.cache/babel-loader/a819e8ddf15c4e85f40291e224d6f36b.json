{"ast":null,"code":"var arbitraryValueRegex = /^\\[(.+)\\]$/;\nvar fractionRegex = /^\\d+\\/\\d+$/;\nvar stringLengths = /*#__PURE__*/new Set(['px', 'full', 'screen']);\nvar tshirtUnitRegex = /^(\\d+)?(xs|sm|md|lg|xl)$/;\nvar lengthUnitRegex = /\\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh)/; // Shadow always begins with x and y offset separated by underscore\n\nvar shadowRegex = /^-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/;\n\nfunction isLength(classPart) {\n  return !Number.isNaN(Number(classPart)) || stringLengths.has(classPart) || fractionRegex.test(classPart) || isArbitraryLength(classPart);\n}\n\nfunction isArbitraryLength(classPart) {\n  var _arbitraryValueRegex$;\n\n  var arbitraryValue = (_arbitraryValueRegex$ = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$[1];\n\n  if (arbitraryValue) {\n    return arbitraryValue.startsWith('length:') || lengthUnitRegex.test(arbitraryValue);\n  }\n\n  return false;\n}\n\nfunction isArbitrarySize(classPart) {\n  var _arbitraryValueRegex$2;\n\n  var arbitraryValue = (_arbitraryValueRegex$2 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$2[1];\n  return arbitraryValue ? arbitraryValue.startsWith('size:') : false;\n}\n\nfunction isArbitraryPosition(classPart) {\n  var _arbitraryValueRegex$3;\n\n  var arbitraryValue = (_arbitraryValueRegex$3 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$3[1];\n  return arbitraryValue ? arbitraryValue.startsWith('position:') : false;\n}\n\nfunction isArbitraryUrl(classPart) {\n  var _arbitraryValueRegex$4;\n\n  var arbitraryValue = (_arbitraryValueRegex$4 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$4[1];\n  return arbitraryValue ? arbitraryValue.startsWith('url(') || arbitraryValue.startsWith('url:') : false;\n}\n\nfunction isArbitraryNumber(classPart) {\n  var _arbitraryValueRegex$5;\n\n  var arbitraryValue = (_arbitraryValueRegex$5 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$5[1];\n  return arbitraryValue ? !Number.isNaN(Number(arbitraryValue)) || arbitraryValue.startsWith('number:') : false;\n}\n/**\r\n * @deprecated Will be removed in next major version. Use `isArbitraryNumber` instead.\r\n */\n\n\nvar isArbitraryWeight = isArbitraryNumber;\n\nfunction isInteger(classPart) {\n  var _arbitraryValueRegex$6;\n\n  var arbitraryValue = (_arbitraryValueRegex$6 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$6[1];\n\n  if (arbitraryValue) {\n    return Number.isInteger(Number(arbitraryValue));\n  }\n\n  return Number.isInteger(Number(classPart));\n}\n\nfunction isArbitraryValue(classPart) {\n  return arbitraryValueRegex.test(classPart);\n}\n\nfunction isAny() {\n  return true;\n}\n\nfunction isTshirtSize(classPart) {\n  return tshirtUnitRegex.test(classPart);\n}\n\nfunction isArbitraryShadow(classPart) {\n  var _arbitraryValueRegex$7;\n\n  var arbitraryValue = (_arbitraryValueRegex$7 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$7[1];\n\n  if (arbitraryValue) {\n    return shadowRegex.test(arbitraryValue);\n  }\n\n  return false;\n}\n\nexport { isAny, isArbitraryLength, isArbitraryNumber, isArbitraryPosition, isArbitraryShadow, isArbitrarySize, isArbitraryUrl, isArbitraryValue, isArbitraryWeight, isInteger, isLength, isTshirtSize };","map":{"version":3,"sources":["../../src/lib/validators.ts"],"names":["arbitraryValueRegex","fractionRegex","stringLengths","tshirtUnitRegex","lengthUnitRegex","shadowRegex","Number","isArbitraryLength","arbitraryValue","isArbitraryWeight","isAny"],"mappings":"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","sourcesContent":["const arbitraryValueRegex = /^\\[(.+)\\]$/\nconst fractionRegex = /^\\d+\\/\\d+$/\nconst stringLengths = new Set(['px', 'full', 'screen'])\nconst tshirtUnitRegex = /^(\\d+)?(xs|sm|md|lg|xl)$/\nconst lengthUnitRegex = /\\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh)/\n// Shadow always begins with x and y offset separated by underscore\nconst shadowRegex = /^-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/\n\nexport function isLength(classPart: string) {\n    return (\n        !Number.isNaN(Number(classPart)) ||\n        stringLengths.has(classPart) ||\n        fractionRegex.test(classPart) ||\n        isArbitraryLength(classPart)\n    )\n}\n\nexport function isArbitraryLength(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    if (arbitraryValue) {\n        return arbitraryValue.startsWith('length:') || lengthUnitRegex.test(arbitraryValue)\n    }\n\n    return false\n}\n\nexport function isArbitrarySize(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    return arbitraryValue ? arbitraryValue.startsWith('size:') : false\n}\n\nexport function isArbitraryPosition(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    return arbitraryValue ? arbitraryValue.startsWith('position:') : false\n}\n\nexport function isArbitraryUrl(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    return arbitraryValue\n        ? arbitraryValue.startsWith('url(') || arbitraryValue.startsWith('url:')\n        : false\n}\n\nexport function isArbitraryNumber(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    return arbitraryValue\n        ? !Number.isNaN(Number(arbitraryValue)) || arbitraryValue.startsWith('number:')\n        : false\n}\n\n/**\n * @deprecated Will be removed in next major version. Use `isArbitraryNumber` instead.\n */\nexport const isArbitraryWeight = isArbitraryNumber\n\nexport function isInteger(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    if (arbitraryValue) {\n        return Number.isInteger(Number(arbitraryValue))\n    }\n\n    return Number.isInteger(Number(classPart))\n}\n\nexport function isArbitraryValue(classPart: string) {\n    return arbitraryValueRegex.test(classPart)\n}\n\nexport function isAny() {\n    return true\n}\n\nexport function isTshirtSize(classPart: string) {\n    return tshirtUnitRegex.test(classPart)\n}\n\nexport function isArbitraryShadow(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    if (arbitraryValue) {\n        return shadowRegex.test(arbitraryValue)\n    }\n\n    return false\n}\n"]},"metadata":{},"sourceType":"module"}