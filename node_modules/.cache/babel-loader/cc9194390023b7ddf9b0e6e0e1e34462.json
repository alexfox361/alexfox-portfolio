{"ast":null,"code":"/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport getBoundingClientRect from '../../modules/getBoundingClientRect';\nimport setValueForStyles from '../../modules/setValueForStyles';\n\nvar getRect = node => {\n  // Unlike the DOM's getBoundingClientRect, React Native layout measurements\n  // for \"height\" and \"width\" ignore scale transforms.\n  // https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Determining_the_dimensions_of_elements\n  var _getBoundingClientRec = getBoundingClientRect(node),\n      x = _getBoundingClientRec.x,\n      y = _getBoundingClientRec.y,\n      top = _getBoundingClientRec.top,\n      left = _getBoundingClientRec.left;\n\n  var width = node.offsetWidth;\n  var height = node.offsetHeight;\n  return {\n    x,\n    y,\n    width,\n    height,\n    top,\n    left\n  };\n};\n\nvar measureLayout = (node, relativeToNativeNode, callback) => {\n  var relativeNode = relativeToNativeNode || node && node.parentNode;\n\n  if (node && relativeNode) {\n    setTimeout(() => {\n      var relativeRect = getBoundingClientRect(relativeNode);\n\n      var _getRect = getRect(node),\n          height = _getRect.height,\n          left = _getRect.left,\n          top = _getRect.top,\n          width = _getRect.width;\n\n      var x = left - relativeRect.left;\n      var y = top - relativeRect.top;\n      callback(x, y, width, height, left, top);\n    }, 0);\n  }\n};\n\nvar focusableElements = {\n  A: true,\n  INPUT: true,\n  SELECT: true,\n  TEXTAREA: true\n};\nvar UIManager = {\n  blur(node) {\n    try {\n      node.blur();\n    } catch (err) {}\n  },\n\n  focus(node) {\n    try {\n      var name = node.nodeName; // A tabIndex of -1 allows element to be programmatically focused but\n      // prevents keyboard focus, so we don't want to set the value on elements\n      // that support keyboard focus by default.\n\n      if (node.getAttribute('tabIndex') == null && focusableElements[name] == null) {\n        node.setAttribute('tabIndex', '-1');\n      }\n\n      node.focus();\n    } catch (err) {}\n  },\n\n  measure(node, callback) {\n    measureLayout(node, null, callback);\n  },\n\n  measureInWindow(node, callback) {\n    if (node) {\n      setTimeout(() => {\n        var _getRect2 = getRect(node),\n            height = _getRect2.height,\n            left = _getRect2.left,\n            top = _getRect2.top,\n            width = _getRect2.width;\n\n        callback(left, top, width, height);\n      }, 0);\n    }\n  },\n\n  measureLayout(node, relativeToNativeNode, onFail, onSuccess) {\n    measureLayout(node, relativeToNativeNode, onSuccess);\n  },\n\n  updateView(node, props) {\n    for (var prop in props) {\n      if (!Object.prototype.hasOwnProperty.call(props, prop)) {\n        continue;\n      }\n\n      var value = props[prop];\n\n      switch (prop) {\n        case 'style':\n          {\n            setValueForStyles(node, value);\n            break;\n          }\n\n        case 'class':\n        case 'className':\n          {\n            node.setAttribute('class', value);\n            break;\n          }\n\n        case 'text':\n        case 'value':\n          // native platforms use `text` prop to replace text input value\n          node.value = value;\n          break;\n\n        default:\n          node.setAttribute(prop, value);\n      }\n    }\n  },\n\n  configureNextLayoutAnimation(config, onAnimationDidEnd) {\n    onAnimationDidEnd();\n  },\n\n  // mocks\n  setLayoutAnimationEnabledExperimental() {}\n\n};\nexport default UIManager;","map":{"version":3,"sources":["C:/Users/alex/Documents/GitHub/alexfox-portfolio/node_modules/react-native-web/dist/exports/UIManager/index.js"],"names":["getBoundingClientRect","setValueForStyles","getRect","node","_getBoundingClientRec","x","y","top","left","width","offsetWidth","height","offsetHeight","measureLayout","relativeToNativeNode","callback","relativeNode","parentNode","setTimeout","relativeRect","_getRect","focusableElements","A","INPUT","SELECT","TEXTAREA","UIManager","blur","err","focus","name","nodeName","getAttribute","setAttribute","measure","measureInWindow","_getRect2","onFail","onSuccess","updateView","props","prop","Object","prototype","hasOwnProperty","call","value","configureNextLayoutAnimation","config","onAnimationDidEnd","setLayoutAnimationEnabledExperimental"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,qBAAP,MAAkC,qCAAlC;AACA,OAAOC,iBAAP,MAA8B,iCAA9B;;AAEA,IAAIC,OAAO,GAAGC,IAAI,IAAI;AACpB;AACA;AACA;AACA,MAAIC,qBAAqB,GAAGJ,qBAAqB,CAACG,IAAD,CAAjD;AAAA,MACIE,CAAC,GAAGD,qBAAqB,CAACC,CAD9B;AAAA,MAEIC,CAAC,GAAGF,qBAAqB,CAACE,CAF9B;AAAA,MAGIC,GAAG,GAAGH,qBAAqB,CAACG,GAHhC;AAAA,MAIIC,IAAI,GAAGJ,qBAAqB,CAACI,IAJjC;;AAMA,MAAIC,KAAK,GAAGN,IAAI,CAACO,WAAjB;AACA,MAAIC,MAAM,GAAGR,IAAI,CAACS,YAAlB;AACA,SAAO;AACLP,IAAAA,CADK;AAELC,IAAAA,CAFK;AAGLG,IAAAA,KAHK;AAILE,IAAAA,MAJK;AAKLJ,IAAAA,GALK;AAMLC,IAAAA;AANK,GAAP;AAQD,CApBD;;AAsBA,IAAIK,aAAa,GAAG,CAACV,IAAD,EAAOW,oBAAP,EAA6BC,QAA7B,KAA0C;AAC5D,MAAIC,YAAY,GAAGF,oBAAoB,IAAIX,IAAI,IAAIA,IAAI,CAACc,UAAxD;;AAEA,MAAId,IAAI,IAAIa,YAAZ,EAA0B;AACxBE,IAAAA,UAAU,CAAC,MAAM;AACf,UAAIC,YAAY,GAAGnB,qBAAqB,CAACgB,YAAD,CAAxC;;AAEA,UAAII,QAAQ,GAAGlB,OAAO,CAACC,IAAD,CAAtB;AAAA,UACIQ,MAAM,GAAGS,QAAQ,CAACT,MADtB;AAAA,UAEIH,IAAI,GAAGY,QAAQ,CAACZ,IAFpB;AAAA,UAGID,GAAG,GAAGa,QAAQ,CAACb,GAHnB;AAAA,UAIIE,KAAK,GAAGW,QAAQ,CAACX,KAJrB;;AAMA,UAAIJ,CAAC,GAAGG,IAAI,GAAGW,YAAY,CAACX,IAA5B;AACA,UAAIF,CAAC,GAAGC,GAAG,GAAGY,YAAY,CAACZ,GAA3B;AACAQ,MAAAA,QAAQ,CAACV,CAAD,EAAIC,CAAJ,EAAOG,KAAP,EAAcE,MAAd,EAAsBH,IAAtB,EAA4BD,GAA5B,CAAR;AACD,KAZS,EAYP,CAZO,CAAV;AAaD;AACF,CAlBD;;AAoBA,IAAIc,iBAAiB,GAAG;AACtBC,EAAAA,CAAC,EAAE,IADmB;AAEtBC,EAAAA,KAAK,EAAE,IAFe;AAGtBC,EAAAA,MAAM,EAAE,IAHc;AAItBC,EAAAA,QAAQ,EAAE;AAJY,CAAxB;AAMA,IAAIC,SAAS,GAAG;AACdC,EAAAA,IAAI,CAACxB,IAAD,EAAO;AACT,QAAI;AACFA,MAAAA,IAAI,CAACwB,IAAL;AACD,KAFD,CAEE,OAAOC,GAAP,EAAY,CAAE;AACjB,GALa;;AAOdC,EAAAA,KAAK,CAAC1B,IAAD,EAAO;AACV,QAAI;AACF,UAAI2B,IAAI,GAAG3B,IAAI,CAAC4B,QAAhB,CADE,CACwB;AAC1B;AACA;;AAEA,UAAI5B,IAAI,CAAC6B,YAAL,CAAkB,UAAlB,KAAiC,IAAjC,IAAyCX,iBAAiB,CAACS,IAAD,CAAjB,IAA2B,IAAxE,EAA8E;AAC5E3B,QAAAA,IAAI,CAAC8B,YAAL,CAAkB,UAAlB,EAA8B,IAA9B;AACD;;AAED9B,MAAAA,IAAI,CAAC0B,KAAL;AACD,KAVD,CAUE,OAAOD,GAAP,EAAY,CAAE;AACjB,GAnBa;;AAqBdM,EAAAA,OAAO,CAAC/B,IAAD,EAAOY,QAAP,EAAiB;AACtBF,IAAAA,aAAa,CAACV,IAAD,EAAO,IAAP,EAAaY,QAAb,CAAb;AACD,GAvBa;;AAyBdoB,EAAAA,eAAe,CAAChC,IAAD,EAAOY,QAAP,EAAiB;AAC9B,QAAIZ,IAAJ,EAAU;AACRe,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIkB,SAAS,GAAGlC,OAAO,CAACC,IAAD,CAAvB;AAAA,YACIQ,MAAM,GAAGyB,SAAS,CAACzB,MADvB;AAAA,YAEIH,IAAI,GAAG4B,SAAS,CAAC5B,IAFrB;AAAA,YAGID,GAAG,GAAG6B,SAAS,CAAC7B,GAHpB;AAAA,YAIIE,KAAK,GAAG2B,SAAS,CAAC3B,KAJtB;;AAMAM,QAAAA,QAAQ,CAACP,IAAD,EAAOD,GAAP,EAAYE,KAAZ,EAAmBE,MAAnB,CAAR;AACD,OARS,EAQP,CARO,CAAV;AASD;AACF,GArCa;;AAuCdE,EAAAA,aAAa,CAACV,IAAD,EAAOW,oBAAP,EAA6BuB,MAA7B,EAAqCC,SAArC,EAAgD;AAC3DzB,IAAAA,aAAa,CAACV,IAAD,EAAOW,oBAAP,EAA6BwB,SAA7B,CAAb;AACD,GAzCa;;AA2CdC,EAAAA,UAAU,CAACpC,IAAD,EAAOqC,KAAP,EAAc;AACtB,SAAK,IAAIC,IAAT,IAAiBD,KAAjB,EAAwB;AACtB,UAAI,CAACE,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,KAArC,EAA4CC,IAA5C,CAAL,EAAwD;AACtD;AACD;;AAED,UAAIK,KAAK,GAAGN,KAAK,CAACC,IAAD,CAAjB;;AAEA,cAAQA,IAAR;AACE,aAAK,OAAL;AACE;AACExC,YAAAA,iBAAiB,CAACE,IAAD,EAAO2C,KAAP,CAAjB;AACA;AACD;;AAEH,aAAK,OAAL;AACA,aAAK,WAAL;AACE;AACE3C,YAAAA,IAAI,CAAC8B,YAAL,CAAkB,OAAlB,EAA2Ba,KAA3B;AACA;AACD;;AAEH,aAAK,MAAL;AACA,aAAK,OAAL;AACE;AACA3C,UAAAA,IAAI,CAAC2C,KAAL,GAAaA,KAAb;AACA;;AAEF;AACE3C,UAAAA,IAAI,CAAC8B,YAAL,CAAkBQ,IAAlB,EAAwBK,KAAxB;AArBJ;AAuBD;AACF,GA3Ea;;AA6EdC,EAAAA,4BAA4B,CAACC,MAAD,EAASC,iBAAT,EAA4B;AACtDA,IAAAA,iBAAiB;AAClB,GA/Ea;;AAiFd;AACAC,EAAAA,qCAAqC,GAAG,CAAE;;AAlF5B,CAAhB;AAqFA,eAAexB,SAAf","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport getBoundingClientRect from '../../modules/getBoundingClientRect';\nimport setValueForStyles from '../../modules/setValueForStyles';\n\nvar getRect = node => {\n  // Unlike the DOM's getBoundingClientRect, React Native layout measurements\n  // for \"height\" and \"width\" ignore scale transforms.\n  // https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Determining_the_dimensions_of_elements\n  var _getBoundingClientRec = getBoundingClientRect(node),\n      x = _getBoundingClientRec.x,\n      y = _getBoundingClientRec.y,\n      top = _getBoundingClientRec.top,\n      left = _getBoundingClientRec.left;\n\n  var width = node.offsetWidth;\n  var height = node.offsetHeight;\n  return {\n    x,\n    y,\n    width,\n    height,\n    top,\n    left\n  };\n};\n\nvar measureLayout = (node, relativeToNativeNode, callback) => {\n  var relativeNode = relativeToNativeNode || node && node.parentNode;\n\n  if (node && relativeNode) {\n    setTimeout(() => {\n      var relativeRect = getBoundingClientRect(relativeNode);\n\n      var _getRect = getRect(node),\n          height = _getRect.height,\n          left = _getRect.left,\n          top = _getRect.top,\n          width = _getRect.width;\n\n      var x = left - relativeRect.left;\n      var y = top - relativeRect.top;\n      callback(x, y, width, height, left, top);\n    }, 0);\n  }\n};\n\nvar focusableElements = {\n  A: true,\n  INPUT: true,\n  SELECT: true,\n  TEXTAREA: true\n};\nvar UIManager = {\n  blur(node) {\n    try {\n      node.blur();\n    } catch (err) {}\n  },\n\n  focus(node) {\n    try {\n      var name = node.nodeName; // A tabIndex of -1 allows element to be programmatically focused but\n      // prevents keyboard focus, so we don't want to set the value on elements\n      // that support keyboard focus by default.\n\n      if (node.getAttribute('tabIndex') == null && focusableElements[name] == null) {\n        node.setAttribute('tabIndex', '-1');\n      }\n\n      node.focus();\n    } catch (err) {}\n  },\n\n  measure(node, callback) {\n    measureLayout(node, null, callback);\n  },\n\n  measureInWindow(node, callback) {\n    if (node) {\n      setTimeout(() => {\n        var _getRect2 = getRect(node),\n            height = _getRect2.height,\n            left = _getRect2.left,\n            top = _getRect2.top,\n            width = _getRect2.width;\n\n        callback(left, top, width, height);\n      }, 0);\n    }\n  },\n\n  measureLayout(node, relativeToNativeNode, onFail, onSuccess) {\n    measureLayout(node, relativeToNativeNode, onSuccess);\n  },\n\n  updateView(node, props) {\n    for (var prop in props) {\n      if (!Object.prototype.hasOwnProperty.call(props, prop)) {\n        continue;\n      }\n\n      var value = props[prop];\n\n      switch (prop) {\n        case 'style':\n          {\n            setValueForStyles(node, value);\n            break;\n          }\n\n        case 'class':\n        case 'className':\n          {\n            node.setAttribute('class', value);\n            break;\n          }\n\n        case 'text':\n        case 'value':\n          // native platforms use `text` prop to replace text input value\n          node.value = value;\n          break;\n\n        default:\n          node.setAttribute(prop, value);\n      }\n    }\n  },\n\n  configureNextLayoutAnimation(config, onAnimationDidEnd) {\n    onAnimationDidEnd();\n  },\n\n  // mocks\n  setLayoutAnimationEnabledExperimental() {}\n\n};\nexport default UIManager;"]},"metadata":{},"sourceType":"module"}