{"ast":null,"code":"import { createConfigUtils } from './config-utils.mjs';\nimport { mergeClassList } from './merge-classlist.mjs';\nimport { twJoin } from './tw-join.mjs';\n\nfunction createTailwindMerge() {\n  for (var _len = arguments.length, createConfig = new Array(_len), _key = 0; _key < _len; _key++) {\n    createConfig[_key] = arguments[_key];\n  }\n\n  var configUtils;\n  var cacheGet;\n  var cacheSet;\n  var functionToCall = initTailwindMerge;\n\n  function initTailwindMerge(classList) {\n    var firstCreateConfig = createConfig[0],\n        restCreateConfig = createConfig.slice(1);\n    var config = restCreateConfig.reduce(function (previousConfig, createConfigCurrent) {\n      return createConfigCurrent(previousConfig);\n    }, firstCreateConfig());\n    configUtils = createConfigUtils(config);\n    cacheGet = configUtils.cache.get;\n    cacheSet = configUtils.cache.set;\n    functionToCall = tailwindMerge;\n    return tailwindMerge(classList);\n  }\n\n  function tailwindMerge(classList) {\n    var cachedResult = cacheGet(classList);\n\n    if (cachedResult) {\n      return cachedResult;\n    }\n\n    var result = mergeClassList(classList, configUtils);\n    cacheSet(classList, result);\n    return result;\n  }\n\n  return function callTailwindMerge() {\n    return functionToCall(twJoin.apply(null, arguments));\n  };\n}\n\nexport { createTailwindMerge };","map":{"version":3,"sources":["../../src/lib/create-tailwind-merge.ts"],"names":["createConfig","functionToCall","firstCreateConfig","restCreateConfig","config","createConfigCurrent","configUtils","createConfigUtils","cacheGet","cacheSet","tailwindMerge","cachedResult","result","mergeClassList","twJoin"],"mappings":";;;;AAUgB,SAAA,mBAAA,GACqD;AAAA,OAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAA9DA,YAA8D,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAA9DA,IAAAA,YAA8D,CAAA,IAAA,CAA9DA,GAA8D,SAAA,CAAA,IAAA,CAA9DA;AAA8D;;AAEjE,MAAA,WAAA;AACA,MAAA,QAAA;AACA,MAAA,QAAA;AACA,MAAIC,cAAc,GAAlB,iBAAA;;AAEA,WAAA,iBAAA,CAAA,SAAA,EAA4C;AACxC,QAAOC,iBAAP,GAAiDF,YAAjD,CAAA,CAAA,CAAA;AAAA,QAA6BG,gBAA7B,GAAiDH,YAAjD,CAAA,KAAiDA,CAAjD,CAAiDA,CAAjD;AAEA,QAAMI,MAAM,GAAG,gBAAgB,CAAhB,MAAA,CACX,UAAA,cAAA,EAAA,mBAAA,EAAA;AAAA,aAAyCC,mBAAmB,CAA5D,cAA4D,CAA5D;AADW,KAAA,EAEXH,iBAFJ,EAAe,CAAf;AAKAI,IAAAA,WAAW,GAAGC,iBAAiB,CAA/BD,MAA+B,CAA/BA;AACAE,IAAAA,QAAQ,GAAGF,WAAW,CAAXA,KAAAA,CAAXE,GAAAA;AACAC,IAAAA,QAAQ,GAAGH,WAAW,CAAXA,KAAAA,CAAXG,GAAAA;AACAR,IAAAA,cAAc,GAAdA,aAAAA;AAEA,WAAOS,aAAa,CAApB,SAAoB,CAApB;AACH;;AAED,WAAA,aAAA,CAAA,SAAA,EAAwC;AACpC,QAAMC,YAAY,GAAGH,QAAQ,CAA7B,SAA6B,CAA7B;;AAEA,QAAA,YAAA,EAAkB;AACd,aAAA,YAAA;AACH;;AAED,QAAMI,MAAM,GAAGC,cAAc,CAAA,SAAA,EAA7B,WAA6B,CAA7B;AACAJ,IAAAA,QAAQ,CAAA,SAAA,EAARA,MAAQ,CAARA;AAEA,WAAA,MAAA;AACH;;AAED,SAAO,SAAA,iBAAA,GAA0B;AAC7B,WAAOR,cAAc,CAACa,MAAM,CAANA,KAAAA,CAAAA,IAAAA,EAAtB,SAAsBA,CAAD,CAArB;AADJ,GAAA;AAGH","sourcesContent":["import { createConfigUtils } from './config-utils'\nimport { Config } from './types'\nimport { mergeClassList } from './merge-classlist'\nimport { ClassNameValue, twJoin } from './tw-join'\n\ntype CreateConfigFirst = () => Config\ntype CreateConfigSubsequent = (config: Config) => Config\ntype TailwindMerge = (...classLists: ClassNameValue[]) => string\ntype ConfigUtils = ReturnType<typeof createConfigUtils>\n\nexport function createTailwindMerge(\n    ...createConfig: [CreateConfigFirst, ...CreateConfigSubsequent[]]\n): TailwindMerge {\n    let configUtils: ConfigUtils\n    let cacheGet: ConfigUtils['cache']['get']\n    let cacheSet: ConfigUtils['cache']['set']\n    let functionToCall = initTailwindMerge\n\n    function initTailwindMerge(classList: string) {\n        const [firstCreateConfig, ...restCreateConfig] = createConfig\n\n        const config = restCreateConfig.reduce(\n            (previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig),\n            firstCreateConfig(),\n        )\n\n        configUtils = createConfigUtils(config)\n        cacheGet = configUtils.cache.get\n        cacheSet = configUtils.cache.set\n        functionToCall = tailwindMerge\n\n        return tailwindMerge(classList)\n    }\n\n    function tailwindMerge(classList: string) {\n        const cachedResult = cacheGet(classList)\n\n        if (cachedResult) {\n            return cachedResult\n        }\n\n        const result = mergeClassList(classList, configUtils)\n        cacheSet(classList, result)\n\n        return result\n    }\n\n    return function callTailwindMerge() {\n        return functionToCall(twJoin.apply(null, arguments as any))\n    }\n}\n"]},"metadata":{},"sourceType":"module"}