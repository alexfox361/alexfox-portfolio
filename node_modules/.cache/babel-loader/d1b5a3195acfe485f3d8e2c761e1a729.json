{"ast":null,"code":"/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar CSS_UNIT_RE = /^[+-]?\\d*(?:\\.\\d+)?(?:[Ee][+-]?\\d+)?(%|\\w*)/;\n\nvar getUnit = str => str.match(CSS_UNIT_RE)[1];\n\nvar isNumeric = n => {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\n\nvar multiplyStyleLengthValue = (value, multiple) => {\n  if (typeof value === 'string') {\n    var number = parseFloat(value) * multiple;\n    var unit = getUnit(value);\n    return \"\" + number + unit;\n  } else if (isNumeric(value)) {\n    return value * multiple;\n  }\n};\n\nexport default multiplyStyleLengthValue;","map":{"version":3,"sources":["C:/Users/alex/Documents/GitHub/alexfox-portfolio/node_modules/react-native-web/dist/modules/multiplyStyleLengthValue/index.js"],"names":["CSS_UNIT_RE","getUnit","str","match","isNumeric","n","isNaN","parseFloat","isFinite","multiplyStyleLengthValue","value","multiple","number","unit"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,WAAW,GAAG,6CAAlB;;AAEA,IAAIC,OAAO,GAAGC,GAAG,IAAIA,GAAG,CAACC,KAAJ,CAAUH,WAAV,EAAuB,CAAvB,CAArB;;AAEA,IAAII,SAAS,GAAGC,CAAC,IAAI;AACnB,SAAO,CAACC,KAAK,CAACC,UAAU,CAACF,CAAD,CAAX,CAAN,IAAyBG,QAAQ,CAACH,CAAD,CAAxC;AACD,CAFD;;AAIA,IAAII,wBAAwB,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAClD,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B,QAAIE,MAAM,GAAGL,UAAU,CAACG,KAAD,CAAV,GAAoBC,QAAjC;AACA,QAAIE,IAAI,GAAGZ,OAAO,CAACS,KAAD,CAAlB;AACA,WAAO,KAAKE,MAAL,GAAcC,IAArB;AACD,GAJD,MAIO,IAAIT,SAAS,CAACM,KAAD,CAAb,EAAsB;AAC3B,WAAOA,KAAK,GAAGC,QAAf;AACD;AACF,CARD;;AAUA,eAAeF,wBAAf","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar CSS_UNIT_RE = /^[+-]?\\d*(?:\\.\\d+)?(?:[Ee][+-]?\\d+)?(%|\\w*)/;\n\nvar getUnit = str => str.match(CSS_UNIT_RE)[1];\n\nvar isNumeric = n => {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\n\nvar multiplyStyleLengthValue = (value, multiple) => {\n  if (typeof value === 'string') {\n    var number = parseFloat(value) * multiple;\n    var unit = getUnit(value);\n    return \"\" + number + unit;\n  } else if (isNumeric(value)) {\n    return value * multiple;\n  }\n};\n\nexport default multiplyStyleLengthValue;"]},"metadata":{},"sourceType":"module"}