{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport _bezier from './bezier';\nvar ease;\n/**\n * The `Easing` module implements common easing functions. This module is used\n * by [Animate.timing()](docs/animate.html#timing) to convey physically\n * believable motion in animations.\n *\n * You can find a visualization of some common easing functions at\n * http://easings.net/\n *\n * ### Predefined animations\n *\n * The `Easing` module provides several predefined animations through the\n * following methods:\n *\n * - [`back`](docs/easing.html#back) provides a simple animation where the\n *   object goes slightly back before moving forward\n * - [`bounce`](docs/easing.html#bounce) provides a bouncing animation\n * - [`ease`](docs/easing.html#ease) provides a simple inertial animation\n * - [`elastic`](docs/easing.html#elastic) provides a simple spring interaction\n *\n * ### Standard functions\n *\n * Three standard easing functions are provided:\n *\n * - [`linear`](docs/easing.html#linear)\n * - [`quad`](docs/easing.html#quad)\n * - [`cubic`](docs/easing.html#cubic)\n *\n * The [`poly`](docs/easing.html#poly) function can be used to implement\n * quartic, quintic, and other higher power functions.\n *\n * ### Additional functions\n *\n * Additional mathematical functions are provided by the following methods:\n *\n * - [`bezier`](docs/easing.html#bezier) provides a cubic bezier curve\n * - [`circle`](docs/easing.html#circle) provides a circular function\n * - [`sin`](docs/easing.html#sin) provides a sinusoidal function\n * - [`exp`](docs/easing.html#exp) provides an exponential function\n *\n * The following helpers are used to modify other easing functions.\n *\n * - [`in`](docs/easing.html#in) runs an easing function forwards\n * - [`inOut`](docs/easing.html#inout) makes any easing function symmetrical\n * - [`out`](docs/easing.html#out) runs an easing function backwards\n */\n\nclass Easing {\n  /**\n   * A stepping function, returns 1 for any positive value of `n`.\n   */\n  static step0(n) {\n    return n > 0 ? 1 : 0;\n  }\n  /**\n   * A stepping function, returns 1 if `n` is greater than or equal to 1.\n   */\n\n\n  static step1(n) {\n    return n >= 1 ? 1 : 0;\n  }\n  /**\n   * A linear function, `f(t) = t`. Position correlates to elapsed time one to\n   * one.\n   *\n   * http://cubic-bezier.com/#0,0,1,1\n   */\n\n\n  static linear(t) {\n    return t;\n  }\n  /**\n   * A simple inertial interaction, similar to an object slowly accelerating to\n   * speed.\n   *\n   * http://cubic-bezier.com/#.42,0,1,1\n   */\n\n\n  static ease(t) {\n    if (!ease) {\n      ease = Easing.bezier(0.42, 0, 1, 1);\n    }\n\n    return ease(t);\n  }\n  /**\n   * A quadratic function, `f(t) = t * t`. Position equals the square of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInQuad\n   */\n\n\n  static quad(t) {\n    return t * t;\n  }\n  /**\n   * A cubic function, `f(t) = t * t * t`. Position equals the cube of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInCubic\n   */\n\n\n  static cubic(t) {\n    return t * t * t;\n  }\n  /**\n   * A power function. Position is equal to the Nth power of elapsed time.\n   *\n   * n = 4: http://easings.net/#easeInQuart\n   * n = 5: http://easings.net/#easeInQuint\n   */\n\n\n  static poly(n) {\n    return t => Math.pow(t, n);\n  }\n  /**\n   * A sinusoidal function.\n   *\n   * http://easings.net/#easeInSine\n   */\n\n\n  static sin(t) {\n    return 1 - Math.cos(t * Math.PI / 2);\n  }\n  /**\n   * A circular function.\n   *\n   * http://easings.net/#easeInCirc\n   */\n\n\n  static circle(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n  /**\n   * An exponential function.\n   *\n   * http://easings.net/#easeInExpo\n   */\n\n\n  static exp(t) {\n    return Math.pow(2, 10 * (t - 1));\n  }\n  /**\n   * A simple elastic interaction, similar to a spring oscillating back and\n   * forth.\n   *\n   * Default bounciness is 1, which overshoots a little bit once. 0 bounciness\n   * doesn't overshoot at all, and bounciness of N > 1 will overshoot about N\n   * times.\n   *\n   * http://easings.net/#easeInElastic\n   */\n\n\n  static elastic(bounciness) {\n    if (bounciness === void 0) {\n      bounciness = 1;\n    }\n\n    var p = bounciness * Math.PI;\n    return t => 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);\n  }\n  /**\n   * Use with `Animated.parallel()` to create a simple effect where the object\n   * animates back slightly as the animation starts.\n   *\n   * Wolfram Plot:\n   *\n   * - http://tiny.cc/back_default (s = 1.70158, default)\n   */\n\n\n  static back(s) {\n    if (s === void 0) {\n      s = 1.70158;\n    }\n\n    return t => t * t * ((s + 1) * t - s);\n  }\n  /**\n   * Provides a simple bouncing effect.\n   *\n   * http://easings.net/#easeInBounce\n   */\n\n\n  static bounce(t) {\n    if (t < 1 / 2.75) {\n      return 7.5625 * t * t;\n    }\n\n    if (t < 2 / 2.75) {\n      var _t = t - 1.5 / 2.75;\n\n      return 7.5625 * _t * _t + 0.75;\n    }\n\n    if (t < 2.5 / 2.75) {\n      var _t2 = t - 2.25 / 2.75;\n\n      return 7.5625 * _t2 * _t2 + 0.9375;\n    }\n\n    var t2 = t - 2.625 / 2.75;\n    return 7.5625 * t2 * t2 + 0.984375;\n  }\n  /**\n   * Provides a cubic bezier curve, equivalent to CSS Transitions'\n   * `transition-timing-function`.\n   *\n   * A useful tool to visualize cubic bezier curves can be found at\n   * http://cubic-bezier.com/\n   */\n\n\n  static bezier(x1, y1, x2, y2) {\n    return _bezier(x1, y1, x2, y2);\n  }\n  /**\n   * Runs an easing function forwards.\n   */\n\n\n  static in(easing) {\n    return easing;\n  }\n  /**\n   * Runs an easing function backwards.\n   */\n\n\n  static out(easing) {\n    return t => 1 - easing(1 - t);\n  }\n  /**\n   * Makes any easing function symmetrical. The easing function will run\n   * forwards for half of the duration, then backwards for the rest of the\n   * duration.\n   */\n\n\n  static inOut(easing) {\n    return t => {\n      if (t < 0.5) {\n        return easing(t * 2) / 2;\n      }\n\n      return 1 - easing((1 - t) * 2) / 2;\n    };\n  }\n\n}\n\nexport default Easing;","map":{"version":3,"sources":["C:/Users/alex/Documents/GitHub/alexfox-portfolio/node_modules/react-native-web/dist/vendor/react-native/Animated/Easing.js"],"names":["_bezier","ease","Easing","step0","n","step1","linear","t","bezier","quad","cubic","poly","Math","pow","sin","cos","PI","circle","sqrt","exp","elastic","bounciness","p","back","s","bounce","_t","_t2","t2","x1","y1","x2","y2","in","easing","out","inOut"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,OAAP,MAAoB,UAApB;AACA,IAAIC,IAAJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,MAAN,CAAa;AACX;AACF;AACA;AACc,SAALC,KAAK,CAACC,CAAD,EAAI;AACd,WAAOA,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAY,CAAnB;AACD;AACD;AACF;AACA;;;AAGc,SAALC,KAAK,CAACD,CAAD,EAAI;AACd,WAAOA,CAAC,IAAI,CAAL,GAAS,CAAT,GAAa,CAApB;AACD;AACD;AACF;AACA;AACA;AACA;AACA;;;AAGe,SAANE,MAAM,CAACC,CAAD,EAAI;AACf,WAAOA,CAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;;;AAGa,SAAJN,IAAI,CAACM,CAAD,EAAI;AACb,QAAI,CAACN,IAAL,EAAW;AACTA,MAAAA,IAAI,GAAGC,MAAM,CAACM,MAAP,CAAc,IAAd,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,CAAP;AACD;;AAED,WAAOP,IAAI,CAACM,CAAD,CAAX;AACD;AACD;AACF;AACA;AACA;AACA;AACA;;;AAGa,SAAJE,IAAI,CAACF,CAAD,EAAI;AACb,WAAOA,CAAC,GAAGA,CAAX;AACD;AACD;AACF;AACA;AACA;AACA;AACA;;;AAGc,SAALG,KAAK,CAACH,CAAD,EAAI;AACd,WAAOA,CAAC,GAAGA,CAAJ,GAAQA,CAAf;AACD;AACD;AACF;AACA;AACA;AACA;AACA;;;AAGa,SAAJI,IAAI,CAACP,CAAD,EAAI;AACb,WAAOG,CAAC,IAAIK,IAAI,CAACC,GAAL,CAASN,CAAT,EAAYH,CAAZ,CAAZ;AACD;AACD;AACF;AAC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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport _bezier from './bezier';\nvar ease;\n/**\n * The `Easing` module implements common easing functions. This module is used\n * by [Animate.timing()](docs/animate.html#timing) to convey physically\n * believable motion in animations.\n *\n * You can find a visualization of some common easing functions at\n * http://easings.net/\n *\n * ### Predefined animations\n *\n * The `Easing` module provides several predefined animations through the\n * following methods:\n *\n * - [`back`](docs/easing.html#back) provides a simple animation where the\n *   object goes slightly back before moving forward\n * - [`bounce`](docs/easing.html#bounce) provides a bouncing animation\n * - [`ease`](docs/easing.html#ease) provides a simple inertial animation\n * - [`elastic`](docs/easing.html#elastic) provides a simple spring interaction\n *\n * ### Standard functions\n *\n * Three standard easing functions are provided:\n *\n * - [`linear`](docs/easing.html#linear)\n * - [`quad`](docs/easing.html#quad)\n * - [`cubic`](docs/easing.html#cubic)\n *\n * The [`poly`](docs/easing.html#poly) function can be used to implement\n * quartic, quintic, and other higher power functions.\n *\n * ### Additional functions\n *\n * Additional mathematical functions are provided by the following methods:\n *\n * - [`bezier`](docs/easing.html#bezier) provides a cubic bezier curve\n * - [`circle`](docs/easing.html#circle) provides a circular function\n * - [`sin`](docs/easing.html#sin) provides a sinusoidal function\n * - [`exp`](docs/easing.html#exp) provides an exponential function\n *\n * The following helpers are used to modify other easing functions.\n *\n * - [`in`](docs/easing.html#in) runs an easing function forwards\n * - [`inOut`](docs/easing.html#inout) makes any easing function symmetrical\n * - [`out`](docs/easing.html#out) runs an easing function backwards\n */\n\nclass Easing {\n  /**\n   * A stepping function, returns 1 for any positive value of `n`.\n   */\n  static step0(n) {\n    return n > 0 ? 1 : 0;\n  }\n  /**\n   * A stepping function, returns 1 if `n` is greater than or equal to 1.\n   */\n\n\n  static step1(n) {\n    return n >= 1 ? 1 : 0;\n  }\n  /**\n   * A linear function, `f(t) = t`. Position correlates to elapsed time one to\n   * one.\n   *\n   * http://cubic-bezier.com/#0,0,1,1\n   */\n\n\n  static linear(t) {\n    return t;\n  }\n  /**\n   * A simple inertial interaction, similar to an object slowly accelerating to\n   * speed.\n   *\n   * http://cubic-bezier.com/#.42,0,1,1\n   */\n\n\n  static ease(t) {\n    if (!ease) {\n      ease = Easing.bezier(0.42, 0, 1, 1);\n    }\n\n    return ease(t);\n  }\n  /**\n   * A quadratic function, `f(t) = t * t`. Position equals the square of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInQuad\n   */\n\n\n  static quad(t) {\n    return t * t;\n  }\n  /**\n   * A cubic function, `f(t) = t * t * t`. Position equals the cube of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInCubic\n   */\n\n\n  static cubic(t) {\n    return t * t * t;\n  }\n  /**\n   * A power function. Position is equal to the Nth power of elapsed time.\n   *\n   * n = 4: http://easings.net/#easeInQuart\n   * n = 5: http://easings.net/#easeInQuint\n   */\n\n\n  static poly(n) {\n    return t => Math.pow(t, n);\n  }\n  /**\n   * A sinusoidal function.\n   *\n   * http://easings.net/#easeInSine\n   */\n\n\n  static sin(t) {\n    return 1 - Math.cos(t * Math.PI / 2);\n  }\n  /**\n   * A circular function.\n   *\n   * http://easings.net/#easeInCirc\n   */\n\n\n  static circle(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n  /**\n   * An exponential function.\n   *\n   * http://easings.net/#easeInExpo\n   */\n\n\n  static exp(t) {\n    return Math.pow(2, 10 * (t - 1));\n  }\n  /**\n   * A simple elastic interaction, similar to a spring oscillating back and\n   * forth.\n   *\n   * Default bounciness is 1, which overshoots a little bit once. 0 bounciness\n   * doesn't overshoot at all, and bounciness of N > 1 will overshoot about N\n   * times.\n   *\n   * http://easings.net/#easeInElastic\n   */\n\n\n  static elastic(bounciness) {\n    if (bounciness === void 0) {\n      bounciness = 1;\n    }\n\n    var p = bounciness * Math.PI;\n    return t => 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);\n  }\n  /**\n   * Use with `Animated.parallel()` to create a simple effect where the object\n   * animates back slightly as the animation starts.\n   *\n   * Wolfram Plot:\n   *\n   * - http://tiny.cc/back_default (s = 1.70158, default)\n   */\n\n\n  static back(s) {\n    if (s === void 0) {\n      s = 1.70158;\n    }\n\n    return t => t * t * ((s + 1) * t - s);\n  }\n  /**\n   * Provides a simple bouncing effect.\n   *\n   * http://easings.net/#easeInBounce\n   */\n\n\n  static bounce(t) {\n    if (t < 1 / 2.75) {\n      return 7.5625 * t * t;\n    }\n\n    if (t < 2 / 2.75) {\n      var _t = t - 1.5 / 2.75;\n\n      return 7.5625 * _t * _t + 0.75;\n    }\n\n    if (t < 2.5 / 2.75) {\n      var _t2 = t - 2.25 / 2.75;\n\n      return 7.5625 * _t2 * _t2 + 0.9375;\n    }\n\n    var t2 = t - 2.625 / 2.75;\n    return 7.5625 * t2 * t2 + 0.984375;\n  }\n  /**\n   * Provides a cubic bezier curve, equivalent to CSS Transitions'\n   * `transition-timing-function`.\n   *\n   * A useful tool to visualize cubic bezier curves can be found at\n   * http://cubic-bezier.com/\n   */\n\n\n  static bezier(x1, y1, x2, y2) {\n    return _bezier(x1, y1, x2, y2);\n  }\n  /**\n   * Runs an easing function forwards.\n   */\n\n\n  static in(easing) {\n    return easing;\n  }\n  /**\n   * Runs an easing function backwards.\n   */\n\n\n  static out(easing) {\n    return t => 1 - easing(1 - t);\n  }\n  /**\n   * Makes any easing function symmetrical. The easing function will run\n   * forwards for half of the duration, then backwards for the rest of the\n   * duration.\n   */\n\n\n  static inOut(easing) {\n    return t => {\n      if (t < 0.5) {\n        return easing(t * 2) / 2;\n      }\n\n      return 1 - easing((1 - t) * 2) / 2;\n    };\n  }\n\n}\n\nexport default Easing;"]},"metadata":{},"sourceType":"module"}