{"ast":null,"code":"/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from 'fbjs/lib/invariant';\nimport requestIdleCallback, { cancelIdleCallback } from '../../modules/requestIdleCallback';\nvar InteractionManager = {\n  Events: {\n    interactionStart: 'interactionStart',\n    interactionComplete: 'interactionComplete'\n  },\n\n  /**\n   * Schedule a function to run after all interactions have completed.\n   */\n  runAfterInteractions(task) {\n    var handle;\n    var promise = new Promise(resolve => {\n      handle = requestIdleCallback(() => {\n        if (task) {\n          resolve(task());\n        } else {\n          resolve();\n        }\n      });\n    });\n    return {\n      then: promise.then.bind(promise),\n      done: promise.then.bind(promise),\n      cancel: () => {\n        cancelIdleCallback(handle);\n      }\n    };\n  },\n\n  /**\n   * Notify manager that an interaction has started.\n   */\n  createInteractionHandle() {\n    return 1;\n  },\n\n  /**\n   * Notify manager that an interaction has completed.\n   */\n  clearInteractionHandle(handle) {\n    invariant(!!handle, 'Must provide a handle to clear.');\n  },\n\n  addListener: () => {}\n};\nexport default InteractionManager;","map":{"version":3,"sources":["C:/Users/alex/Documents/GitHub/alexfox-portfolio/node_modules/react-native-web/dist/exports/InteractionManager/index.js"],"names":["invariant","requestIdleCallback","cancelIdleCallback","InteractionManager","Events","interactionStart","interactionComplete","runAfterInteractions","task","handle","promise","Promise","resolve","then","bind","done","cancel","createInteractionHandle","clearInteractionHandle","addListener"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,OAAOC,mBAAP,IAA8BC,kBAA9B,QAAwD,mCAAxD;AACA,IAAIC,kBAAkB,GAAG;AACvBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,gBAAgB,EAAE,kBADZ;AAENC,IAAAA,mBAAmB,EAAE;AAFf,GADe;;AAMvB;AACF;AACA;AACEC,EAAAA,oBAAoB,CAACC,IAAD,EAAO;AACzB,QAAIC,MAAJ;AACA,QAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AACnCH,MAAAA,MAAM,GAAGR,mBAAmB,CAAC,MAAM;AACjC,YAAIO,IAAJ,EAAU;AACRI,UAAAA,OAAO,CAACJ,IAAI,EAAL,CAAP;AACD,SAFD,MAEO;AACLI,UAAAA,OAAO;AACR;AACF,OAN2B,CAA5B;AAOD,KARa,CAAd;AASA,WAAO;AACLC,MAAAA,IAAI,EAAEH,OAAO,CAACG,IAAR,CAAaC,IAAb,CAAkBJ,OAAlB,CADD;AAELK,MAAAA,IAAI,EAAEL,OAAO,CAACG,IAAR,CAAaC,IAAb,CAAkBJ,OAAlB,CAFD;AAGLM,MAAAA,MAAM,EAAE,MAAM;AACZd,QAAAA,kBAAkB,CAACO,MAAD,CAAlB;AACD;AALI,KAAP;AAOD,GA3BsB;;AA6BvB;AACF;AACA;AACEQ,EAAAA,uBAAuB,GAAG;AACxB,WAAO,CAAP;AACD,GAlCsB;;AAoCvB;AACF;AACA;AACEC,EAAAA,sBAAsB,CAACT,MAAD,EAAS;AAC7BT,IAAAA,SAAS,CAAC,CAAC,CAACS,MAAH,EAAW,iCAAX,CAAT;AACD,GAzCsB;;AA2CvBU,EAAAA,WAAW,EAAE,MAAM,CAAE;AA3CE,CAAzB;AA6CA,eAAehB,kBAAf","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from 'fbjs/lib/invariant';\nimport requestIdleCallback, { cancelIdleCallback } from '../../modules/requestIdleCallback';\nvar InteractionManager = {\n  Events: {\n    interactionStart: 'interactionStart',\n    interactionComplete: 'interactionComplete'\n  },\n\n  /**\n   * Schedule a function to run after all interactions have completed.\n   */\n  runAfterInteractions(task) {\n    var handle;\n    var promise = new Promise(resolve => {\n      handle = requestIdleCallback(() => {\n        if (task) {\n          resolve(task());\n        } else {\n          resolve();\n        }\n      });\n    });\n    return {\n      then: promise.then.bind(promise),\n      done: promise.then.bind(promise),\n      cancel: () => {\n        cancelIdleCallback(handle);\n      }\n    };\n  },\n\n  /**\n   * Notify manager that an interaction has started.\n   */\n  createInteractionHandle() {\n    return 1;\n  },\n\n  /**\n   * Notify manager that an interaction has completed.\n   */\n  clearInteractionHandle(handle) {\n    invariant(!!handle, 'Must provide a handle to clear.');\n  },\n\n  addListener: () => {}\n};\nexport default InteractionManager;"]},"metadata":{},"sourceType":"module"}