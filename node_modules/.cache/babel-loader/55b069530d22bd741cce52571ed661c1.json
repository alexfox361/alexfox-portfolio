{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nvar NativeAnimatedAPI = NativeAnimatedHelper.API;\nimport invariant from 'fbjs/lib/invariant';\nvar _uniqueId = 1; // Note(vjeux): this would be better as an interface but flow doesn't\n// support them yet\n\nclass AnimatedNode {\n  __attach() {}\n\n  __detach() {\n    if (this.__isNative && this.__nativeTag != null) {\n      NativeAnimatedHelper.API.dropAnimatedNode(this.__nativeTag);\n      this.__nativeTag = undefined;\n    }\n  }\n\n  __getValue() {}\n\n  __getAnimatedValue() {\n    return this.__getValue();\n  }\n\n  __addChild(child) {}\n\n  __removeChild(child) {}\n\n  __getChildren() {\n    return [];\n  }\n  /* Methods and props used by native Animated impl */\n\n\n  constructor() {\n    this._listeners = {};\n  }\n\n  __makeNative() {\n    if (!this.__isNative) {\n      throw new Error('This node cannot be made a \"native\" animated node');\n    }\n\n    if (this.hasListeners()) {\n      this._startListeningToNativeValueUpdates();\n    }\n  }\n  /**\n   * Adds an asynchronous listener to the value so you can observe updates from\n   * animations.  This is useful because there is no way to\n   * synchronously read the value because it might be driven natively.\n   *\n   * See https://reactnative.dev/docs/animatedvalue.html#addlistener\n   */\n\n\n  addListener(callback) {\n    var id = String(_uniqueId++);\n    this._listeners[id] = callback;\n\n    if (this.__isNative) {\n      this._startListeningToNativeValueUpdates();\n    }\n\n    return id;\n  }\n  /**\n   * Unregister a listener. The `id` param shall match the identifier\n   * previously returned by `addListener()`.\n   *\n   * See https://reactnative.dev/docs/animatedvalue.html#removelistener\n   */\n\n\n  removeListener(id) {\n    delete this._listeners[id];\n\n    if (this.__isNative && !this.hasListeners()) {\n      this._stopListeningForNativeValueUpdates();\n    }\n  }\n  /**\n   * Remove all registered listeners.\n   *\n   * See https://reactnative.dev/docs/animatedvalue.html#removealllisteners\n   */\n\n\n  removeAllListeners() {\n    this._listeners = {};\n\n    if (this.__isNative) {\n      this._stopListeningForNativeValueUpdates();\n    }\n  }\n\n  hasListeners() {\n    return !!Object.keys(this._listeners).length;\n  }\n\n  _startListeningToNativeValueUpdates() {\n    if (this.__nativeAnimatedValueListener && !this.__shouldUpdateListenersForNewNativeTag) {\n      return;\n    }\n\n    if (this.__shouldUpdateListenersForNewNativeTag) {\n      this.__shouldUpdateListenersForNewNativeTag = false;\n\n      this._stopListeningForNativeValueUpdates();\n    }\n\n    NativeAnimatedAPI.startListeningToAnimatedNodeValue(this.__getNativeTag());\n    this.__nativeAnimatedValueListener = NativeAnimatedHelper.nativeEventEmitter.addListener('onAnimatedValueUpdate', data => {\n      if (data.tag !== this.__getNativeTag()) {\n        return;\n      }\n\n      this._onAnimatedValueUpdateReceived(data.value);\n    });\n  }\n\n  _onAnimatedValueUpdateReceived(value) {\n    this.__callListeners(value);\n  }\n\n  __callListeners(value) {\n    for (var _key in this._listeners) {\n      this._listeners[_key]({\n        value\n      });\n    }\n  }\n\n  _stopListeningForNativeValueUpdates() {\n    if (!this.__nativeAnimatedValueListener) {\n      return;\n    }\n\n    this.__nativeAnimatedValueListener.remove();\n\n    this.__nativeAnimatedValueListener = null;\n    NativeAnimatedAPI.stopListeningToAnimatedNodeValue(this.__getNativeTag());\n  }\n\n  __getNativeTag() {\n    var _this$__nativeTag;\n\n    NativeAnimatedHelper.assertNativeAnimatedModule();\n    invariant(this.__isNative, 'Attempt to get native tag from node not marked as \"native\"');\n    var nativeTag = (_this$__nativeTag = this.__nativeTag) !== null && _this$__nativeTag !== void 0 ? _this$__nativeTag : NativeAnimatedHelper.generateNewNodeTag();\n\n    if (this.__nativeTag == null) {\n      this.__nativeTag = nativeTag;\n      NativeAnimatedHelper.API.createAnimatedNode(nativeTag, this.__getNativeConfig());\n      this.__shouldUpdateListenersForNewNativeTag = true;\n    }\n\n    return nativeTag;\n  }\n\n  __getNativeConfig() {\n    throw new Error('This JS animated node type cannot be used as native animated node');\n  }\n\n  toJSON() {\n    return this.__getValue();\n  }\n\n}\n\nexport default AnimatedNode;","map":{"version":3,"sources":["C:/Users/alex/Documents/GitHub/alexfox-portfolio/node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedNode.js"],"names":["NativeAnimatedHelper","NativeAnimatedAPI","API","invariant","_uniqueId","AnimatedNode","__attach","__detach","__isNative","__nativeTag","dropAnimatedNode","undefined","__getValue","__getAnimatedValue","__addChild","child","__removeChild","__getChildren","constructor","_listeners","__makeNative","Error","hasListeners","_startListeningToNativeValueUpdates","addListener","callback","id","String","removeListener","_stopListeningForNativeValueUpdates","removeAllListeners","Object","keys","length","__nativeAnimatedValueListener","__shouldUpdateListenersForNewNativeTag","startListeningToAnimatedNodeValue","__getNativeTag","nativeEventEmitter","data","tag","_onAnimatedValueUpdateReceived","value","__callListeners","_key","remove","stopListeningToAnimatedNodeValue","_this$__nativeTag","assertNativeAnimatedModule","nativeTag","generateNewNodeTag","createAnimatedNode","__getNativeConfig","toJSON"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nvar NativeAnimatedAPI = NativeAnimatedHelper.API;\nimport invariant from 'fbjs/lib/invariant';\nvar _uniqueId = 1; // Note(vjeux): this would be better as an interface but flow doesn't\n// support them yet\n\nclass AnimatedNode {\n  __attach() {}\n\n  __detach() {\n    if (this.__isNative && this.__nativeTag != null) {\n      NativeAnimatedHelper.API.dropAnimatedNode(this.__nativeTag);\n      this.__nativeTag = undefined;\n    }\n  }\n\n  __getValue() {}\n\n  __getAnimatedValue() {\n    return this.__getValue();\n  }\n\n  __addChild(child) {}\n\n  __removeChild(child) {}\n\n  __getChildren() {\n    return [];\n  }\n  /* Methods and props used by native Animated impl */\n\n\n  constructor() {\n    this._listeners = {};\n  }\n\n  __makeNative() {\n    if (!this.__isNative) {\n      throw new Error('This node cannot be made a \"native\" animated node');\n    }\n\n    if (this.hasListeners()) {\n      this._startListeningToNativeValueUpdates();\n    }\n  }\n  /**\n   * Adds an asynchronous listener to the value so you can observe updates from\n   * animations.  This is useful because there is no way to\n   * synchronously read the value because it might be driven natively.\n   *\n   * See https://reactnative.dev/docs/animatedvalue.html#addlistener\n   */\n\n\n  addListener(callback) {\n    var id = String(_uniqueId++);\n    this._listeners[id] = callback;\n\n    if (this.__isNative) {\n      this._startListeningToNativeValueUpdates();\n    }\n\n    return id;\n  }\n  /**\n   * Unregister a listener. The `id` param shall match the identifier\n   * previously returned by `addListener()`.\n   *\n   * See https://reactnative.dev/docs/animatedvalue.html#removelistener\n   */\n\n\n  removeListener(id) {\n    delete this._listeners[id];\n\n    if (this.__isNative && !this.hasListeners()) {\n      this._stopListeningForNativeValueUpdates();\n    }\n  }\n  /**\n   * Remove all registered listeners.\n   *\n   * See https://reactnative.dev/docs/animatedvalue.html#removealllisteners\n   */\n\n\n  removeAllListeners() {\n    this._listeners = {};\n\n    if (this.__isNative) {\n      this._stopListeningForNativeValueUpdates();\n    }\n  }\n\n  hasListeners() {\n    return !!Object.keys(this._listeners).length;\n  }\n\n  _startListeningToNativeValueUpdates() {\n    if (this.__nativeAnimatedValueListener && !this.__shouldUpdateListenersForNewNativeTag) {\n      return;\n    }\n\n    if (this.__shouldUpdateListenersForNewNativeTag) {\n      this.__shouldUpdateListenersForNewNativeTag = false;\n\n      this._stopListeningForNativeValueUpdates();\n    }\n\n    NativeAnimatedAPI.startListeningToAnimatedNodeValue(this.__getNativeTag());\n    this.__nativeAnimatedValueListener = NativeAnimatedHelper.nativeEventEmitter.addListener('onAnimatedValueUpdate', data => {\n      if (data.tag !== this.__getNativeTag()) {\n        return;\n      }\n\n      this._onAnimatedValueUpdateReceived(data.value);\n    });\n  }\n\n  _onAnimatedValueUpdateReceived(value) {\n    this.__callListeners(value);\n  }\n\n  __callListeners(value) {\n    for (var _key in this._listeners) {\n      this._listeners[_key]({\n        value\n      });\n    }\n  }\n\n  _stopListeningForNativeValueUpdates() {\n    if (!this.__nativeAnimatedValueListener) {\n      return;\n    }\n\n    this.__nativeAnimatedValueListener.remove();\n\n    this.__nativeAnimatedValueListener = null;\n    NativeAnimatedAPI.stopListeningToAnimatedNodeValue(this.__getNativeTag());\n  }\n\n  __getNativeTag() {\n    var _this$__nativeTag;\n\n    NativeAnimatedHelper.assertNativeAnimatedModule();\n    invariant(this.__isNative, 'Attempt to get native tag from node not marked as \"native\"');\n    var nativeTag = (_this$__nativeTag = this.__nativeTag) !== null && _this$__nativeTag !== void 0 ? _this$__nativeTag : NativeAnimatedHelper.generateNewNodeTag();\n\n    if (this.__nativeTag == null) {\n      this.__nativeTag = nativeTag;\n      NativeAnimatedHelper.API.createAnimatedNode(nativeTag, this.__getNativeConfig());\n      this.__shouldUpdateListenersForNewNativeTag = true;\n    }\n\n    return nativeTag;\n  }\n\n  __getNativeConfig() {\n    throw new Error('This JS animated node type cannot be used as native animated node');\n  }\n\n  toJSON() {\n    return this.__getValue();\n  }\n\n}\n\nexport default AnimatedNode;"]},"metadata":{},"sourceType":"module"}