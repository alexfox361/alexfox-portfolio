{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport AnimatedInterpolation from './AnimatedInterpolation';\nimport AnimatedWithChildren from './AnimatedWithChildren';\nimport InteractionManager from '../../../../exports/InteractionManager';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nvar NativeAnimatedAPI = NativeAnimatedHelper.API;\n/**\n * Animated works by building a directed acyclic graph of dependencies\n * transparently when you render your Animated components.\n *\n *               new Animated.Value(0)\n *     .interpolate()        .interpolate()    new Animated.Value(1)\n *         opacity               translateY      scale\n *          style                         transform\n *         View#234                         style\n *                                         View#123\n *\n * A) Top Down phase\n * When an Animated.Value is updated, we recursively go down through this\n * graph in order to find leaf nodes: the views that we flag as needing\n * an update.\n *\n * B) Bottom Up phase\n * When a view is flagged as needing an update, we recursively go back up\n * in order to build the new value that it needs. The reason why we need\n * this two-phases process is to deal with composite props such as\n * transform which can receive values from multiple parents.\n */\n\nfunction _flush(rootNode) {\n  var animatedStyles = new Set();\n\n  function findAnimatedStyles(node) {\n    /* $FlowFixMe(>=0.68.0 site=react_native_fb) This comment suppresses an\n     * error found when Flow v0.68 was deployed. To see the error delete this\n     * comment and run Flow. */\n    if (typeof node.update === 'function') {\n      animatedStyles.add(node);\n    } else {\n      node.__getChildren().forEach(findAnimatedStyles);\n    }\n  }\n\n  findAnimatedStyles(rootNode);\n  /* $FlowFixMe */\n\n  animatedStyles.forEach(animatedStyle => animatedStyle.update());\n}\n/**\n * Standard value for driving animations.  One `Animated.Value` can drive\n * multiple properties in a synchronized fashion, but can only be driven by one\n * mechanism at a time.  Using a new mechanism (e.g. starting a new animation,\n * or calling `setValue`) will stop any previous ones.\n *\n * See https://reactnative.dev/docs/animatedvalue.html\n */\n\n\nclass AnimatedValue extends AnimatedWithChildren {\n  constructor(value) {\n    super();\n\n    if (typeof value !== 'number') {\n      throw new Error('AnimatedValue: Attempting to set value to undefined');\n    }\n\n    this._startingValue = this._value = value;\n    this._offset = 0;\n    this._animation = null;\n  }\n\n  __detach() {\n    if (this.__isNative) {\n      NativeAnimatedAPI.getValue(this.__getNativeTag(), value => {\n        this._value = value;\n      });\n    }\n\n    this.stopAnimation();\n\n    super.__detach();\n  }\n\n  __getValue() {\n    return this._value + this._offset;\n  }\n  /**\n   * Directly set the value.  This will stop any animations running on the value\n   * and update all the bound properties.\n   *\n   * See https://reactnative.dev/docs/animatedvalue.html#setvalue\n   */\n\n\n  setValue(value) {\n    if (this._animation) {\n      this._animation.stop();\n\n      this._animation = null;\n    }\n\n    this._updateValue(value, !this.__isNative\n    /* don't perform a flush for natively driven values */\n    );\n\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value);\n    }\n  }\n  /**\n   * Sets an offset that is applied on top of whatever value is set, whether via\n   * `setValue`, an animation, or `Animated.event`.  Useful for compensating\n   * things like the start of a pan gesture.\n   *\n   * See https://reactnative.dev/docs/animatedvalue.html#setoffset\n   */\n\n\n  setOffset(offset) {\n    this._offset = offset;\n\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);\n    }\n  }\n  /**\n   * Merges the offset value into the base value and resets the offset to zero.\n   * The final output of the value is unchanged.\n   *\n   * See https://reactnative.dev/docs/animatedvalue.html#flattenoffset\n   */\n\n\n  flattenOffset() {\n    this._value += this._offset;\n    this._offset = 0;\n\n    if (this.__isNative) {\n      NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n  /**\n   * Sets the offset value to the base value, and resets the base value to zero.\n   * The final output of the value is unchanged.\n   *\n   * See https://reactnative.dev/docs/animatedvalue.html#extractoffset\n   */\n\n\n  extractOffset() {\n    this._offset += this._value;\n    this._value = 0;\n\n    if (this.__isNative) {\n      NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n  /**\n   * Stops any running animation or tracking. `callback` is invoked with the\n   * final value after stopping the animation, which is useful for updating\n   * state to match the animation position with layout.\n   *\n   * See https://reactnative.dev/docs/animatedvalue.html#stopanimation\n   */\n\n\n  stopAnimation(callback) {\n    this.stopTracking();\n    this._animation && this._animation.stop();\n    this._animation = null;\n    callback && callback(this.__getValue());\n  }\n  /**\n   * Stops any animation and resets the value to its original.\n   *\n   * See https://reactnative.dev/docs/animatedvalue.html#resetanimation\n   */\n\n\n  resetAnimation(callback) {\n    this.stopAnimation(callback);\n    this._value = this._startingValue;\n  }\n\n  _onAnimatedValueUpdateReceived(value) {\n    this._updateValue(value, false\n    /*flush*/\n    );\n  }\n  /**\n   * Interpolates the value before updating the property, e.g. mapping 0-1 to\n   * 0-10.\n   */\n\n\n  interpolate(config) {\n    return new AnimatedInterpolation(this, config);\n  }\n  /**\n   * Typically only used internally, but could be used by a custom Animation\n   * class.\n   *\n   * See https://reactnative.dev/docs/animatedvalue.html#animate\n   */\n\n\n  animate(animation, callback) {\n    var handle = null;\n\n    if (animation.__isInteraction) {\n      handle = InteractionManager.createInteractionHandle();\n    }\n\n    var previousAnimation = this._animation;\n    this._animation && this._animation.stop();\n    this._animation = animation;\n    animation.start(this._value, value => {\n      // Natively driven animations will never call into that callback, therefore we can always\n      // pass flush = true to allow the updated value to propagate to native with setNativeProps\n      this._updateValue(value, true\n      /* flush */\n      );\n    }, result => {\n      this._animation = null;\n\n      if (handle !== null) {\n        InteractionManager.clearInteractionHandle(handle);\n      }\n\n      callback && callback(result);\n    }, previousAnimation, this);\n  }\n  /**\n   * Typically only used internally.\n   */\n\n\n  stopTracking() {\n    this._tracking && this._tracking.__detach();\n    this._tracking = null;\n  }\n  /**\n   * Typically only used internally.\n   */\n\n\n  track(tracking) {\n    this.stopTracking();\n    this._tracking = tracking;\n  }\n\n  _updateValue(value, flush) {\n    if (value === undefined) {\n      throw new Error('AnimatedValue: Attempting to set value to undefined');\n    }\n\n    this._value = value;\n\n    if (flush) {\n      _flush(this);\n    }\n\n    super.__callListeners(this.__getValue());\n  }\n\n  __getNativeConfig() {\n    return {\n      type: 'value',\n      value: this._value,\n      offset: this._offset\n    };\n  }\n\n}\n\nexport default AnimatedValue;","map":{"version":3,"sources":["C:/Users/alex/Documents/GitHub/alexfox-portfolio/node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedValue.js"],"names":["AnimatedInterpolation","AnimatedWithChildren","InteractionManager","NativeAnimatedHelper","NativeAnimatedAPI","API","_flush","rootNode","animatedStyles","Set","findAnimatedStyles","node","update","add","__getChildren","forEach","animatedStyle","AnimatedValue","constructor","value","Error","_startingValue","_value","_offset","_animation","__detach","__isNative","getValue","__getNativeTag","stopAnimation","__getValue","setValue","stop","_updateValue","setAnimatedNodeValue","setOffset","offset","setAnimatedNodeOffset","flattenOffset","flattenAnimatedNodeOffset","extractOffset","extractAnimatedNodeOffset","callback","stopTracking","resetAnimation","_onAnimatedValueUpdateReceived","interpolate","config","animate","animation","handle","__isInteraction","createInteractionHandle","previousAnimation","start","result","clearInteractionHandle","_tracking","track","tracking","flush","undefined","__callListeners","__getNativeConfig","type"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,kBAAP,MAA+B,wCAA/B;AACA,OAAOC,oBAAP,MAAiC,yBAAjC;AACA,IAAIC,iBAAiB,GAAGD,oBAAoB,CAACE,GAA7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,MAAT,CAAgBC,QAAhB,EAA0B;AACxB,MAAIC,cAAc,GAAG,IAAIC,GAAJ,EAArB;;AAEA,WAASC,kBAAT,CAA4BC,IAA5B,EAAkC;AAChC;AACJ;AACA;AACI,QAAI,OAAOA,IAAI,CAACC,MAAZ,KAAuB,UAA3B,EAAuC;AACrCJ,MAAAA,cAAc,CAACK,GAAf,CAAmBF,IAAnB;AACD,KAFD,MAEO;AACLA,MAAAA,IAAI,CAACG,aAAL,GAAqBC,OAArB,CAA6BL,kBAA7B;AACD;AACF;;AAEDA,EAAAA,kBAAkB,CAACH,QAAD,CAAlB;AACA;;AAEAC,EAAAA,cAAc,CAACO,OAAf,CAAuBC,aAAa,IAAIA,aAAa,CAACJ,MAAd,EAAxC;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,MAAMK,aAAN,SAA4BhB,oBAA5B,CAAiD;AAC/CiB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB;;AAEA,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,YAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;AACD;;AAED,SAAKC,cAAL,GAAsB,KAAKC,MAAL,GAAcH,KAApC;AACA,SAAKI,OAAL,GAAe,CAAf;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACT,QAAI,KAAKC,UAAT,EAAqB;AACnBtB,MAAAA,iBAAiB,CAACuB,QAAlB,CAA2B,KAAKC,cAAL,EAA3B,EAAkDT,KAAK,IAAI;AACzD,aAAKG,MAAL,GAAcH,KAAd;AACD,OAFD;AAGD;;AAED,SAAKU,aAAL;;AAEA,UAAMJ,QAAN;AACD;;AAEDK,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKR,MAAL,GAAc,KAAKC,OAA1B;AACD;AACD;AACF;AACA;AACA;AACA;AACA;;;AAGEQ,EAAAA,QAAQ,CAACZ,KAAD,EAAQ;AACd,QAAI,KAAKK,UAAT,EAAqB;AACnB,WAAKA,UAAL,CAAgBQ,IAAhB;;AAEA,WAAKR,UAAL,GAAkB,IAAlB;AACD;;AAED,SAAKS,YAAL,CAAkBd,KAAlB,EAAyB,CAAC,KAAKO;AAC/B;AADA;;AAIA,QAAI,KAAKA,UAAT,EAAqB;AACnBtB,MAAAA,iBAAiB,CAAC8B,oBAAlB,CAAuC,KAAKN,cAAL,EAAvC,EAA8DT,KAA9D;AACD;AACF;AACD;AACF;AACA;AACA;AACA;AACA;AACA;;;AAGEgB,EAAAA,SAAS,CAACC,MAAD,EAAS;AAChB,SAAKb,OAAL,GAAea,MAAf;;AAEA,QAAI,KAAKV,UAAT,EAAqB;AACnBtB,MAAAA,iBAAiB,CAACiC,qBAAlB,CAAwC,KAAKT,cAAL,EAAxC,EAA+DQ,MAA/D;AACD;AACF;AACD;AACF;AACA;AACA;AACA;AACA;;;AAGEE,EAAAA,aAAa,GAAG;AACd,SAAKhB,MAAL,IAAe,KAAKC,OAApB;AACA,SAAKA,OAAL,GAAe,CAAf;;AAEA,QAAI,KAAKG,UAAT,EAAqB;AACnBtB,MAAAA,iBAAiB,CAACmC,yBAAlB,CAA4C,KAAKX,cAAL,EAA5C;AACD;AACF;AACD;AACF;AACA;AACA;AACA;AACA;;;AAGEY,EAAAA,aAAa,GAAG;AACd,SAAKjB,OAAL,IAAgB,KAAKD,MAArB;AACA,SAAKA,MAAL,GAAc,CAAd;;AAEA,QAAI,KAAKI,UAAT,EAAqB;AACnBtB,MAAAA,iBAAiB,CAACqC,yBAAlB,CAA4C,KAAKb,cAAL,EAA5C;AACD;AACF;AACD;AACF;AACA;AACA;AACA;AACA;AACA;;;AAGEC,EAAAA,aAAa,CAACa,QAAD,EAAW;AACtB,SAAKC,YAAL;AACA,SAAKnB,UAAL,IAAmB,KAAKA,UAAL,CAAgBQ,IAAhB,EAAnB;AACA,SAAKR,UAAL,GAAkB,IAAlB;AACAkB,IAAAA,QAAQ,IAAIA,QAAQ,CAAC,KAAKZ,UAAL,EAAD,CAApB;AACD;AACD;AACF;AACA;AACA;AACA;;;AAGEc,EAAAA,cAAc,CAACF,QAAD,EAAW;AACvB,SAAKb,aAAL,CAAmBa,QAAnB;AACA,SAAKpB,MAAL,GAAc,KAAKD,cAAnB;AACD;;AAEDwB,EAAAA,8BAA8B,CAAC1B,KAAD,EAAQ;AACpC,SAAKc,YAAL,CAAkBd,KAAlB,EAAyB;AACzB;AADA;AAGD;AACD;AACF;AACA;AACA;;;AAGE2B,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,WAAO,IAAI/C,qBAAJ,CAA0B,IAA1B,EAAgC+C,MAAhC,CAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;;;AAGEC,EAAAA,OAAO,CAACC,SAAD,EAAYP,QAAZ,EAAsB;AAC3B,QAAIQ,MAAM,GAAG,IAAb;;AAEA,QAAID,SAAS,CAACE,eAAd,EAA+B;AAC7BD,MAAAA,MAAM,GAAGhD,kBAAkB,CAACkD,uBAAnB,EAAT;AACD;;AAED,QAAIC,iBAAiB,GAAG,KAAK7B,UAA7B;AACA,SAAKA,UAAL,IAAmB,KAAKA,UAAL,CAAgBQ,IAAhB,EAAnB;AACA,SAAKR,UAAL,GAAkByB,SAAlB;AACAA,IAAAA,SAAS,CAACK,KAAV,CAAgB,KAAKhC,MAArB,EAA6BH,KAAK,IAAI;AACpC;AACA;AACA,WAAKc,YAAL,CAAkBd,KAAlB,EAAyB;AACzB;AADA;AAGD,KAND,EAMGoC,MAAM,IAAI;AACX,WAAK/B,UAAL,GAAkB,IAAlB;;AAEA,UAAI0B,MAAM,KAAK,IAAf,EAAqB;AACnBhD,QAAAA,kBAAkB,CAACsD,sBAAnB,CAA0CN,MAA1C;AACD;;AAEDR,MAAAA,QAAQ,IAAIA,QAAQ,CAACa,MAAD,CAApB;AACD,KAdD,EAcGF,iBAdH,EAcsB,IAdtB;AAeD;AACD;AACF;AACA;;;AAGEV,EAAAA,YAAY,GAAG;AACb,SAAKc,SAAL,IAAkB,KAAKA,SAAL,CAAehC,QAAf,EAAlB;AACA,SAAKgC,SAAL,GAAiB,IAAjB;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACd,SAAKhB,YAAL;AACA,SAAKc,SAAL,GAAiBE,QAAjB;AACD;;AAED1B,EAAAA,YAAY,CAACd,KAAD,EAAQyC,KAAR,EAAe;AACzB,QAAIzC,KAAK,KAAK0C,SAAd,EAAyB;AACvB,YAAM,IAAIzC,KAAJ,CAAU,qDAAV,CAAN;AACD;;AAED,SAAKE,MAAL,GAAcH,KAAd;;AAEA,QAAIyC,KAAJ,EAAW;AACTtD,MAAAA,MAAM,CAAC,IAAD,CAAN;AACD;;AAED,UAAMwD,eAAN,CAAsB,KAAKhC,UAAL,EAAtB;AACD;;AAEDiC,EAAAA,iBAAiB,GAAG;AAClB,WAAO;AACLC,MAAAA,IAAI,EAAE,OADD;AAEL7C,MAAAA,KAAK,EAAE,KAAKG,MAFP;AAGLc,MAAAA,MAAM,EAAE,KAAKb;AAHR,KAAP;AAKD;;AArN8C;;AAyNjD,eAAeN,aAAf","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport AnimatedInterpolation from './AnimatedInterpolation';\nimport AnimatedWithChildren from './AnimatedWithChildren';\nimport InteractionManager from '../../../../exports/InteractionManager';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nvar NativeAnimatedAPI = NativeAnimatedHelper.API;\n/**\n * Animated works by building a directed acyclic graph of dependencies\n * transparently when you render your Animated components.\n *\n *               new Animated.Value(0)\n *     .interpolate()        .interpolate()    new Animated.Value(1)\n *         opacity               translateY      scale\n *          style                         transform\n *         View#234                         style\n *                                         View#123\n *\n * A) Top Down phase\n * When an Animated.Value is updated, we recursively go down through this\n * graph in order to find leaf nodes: the views that we flag as needing\n * an update.\n *\n * B) Bottom Up phase\n * When a view is flagged as needing an update, we recursively go back up\n * in order to build the new value that it needs. The reason why we need\n * this two-phases process is to deal with composite props such as\n * transform which can receive values from multiple parents.\n */\n\nfunction _flush(rootNode) {\n  var animatedStyles = new Set();\n\n  function findAnimatedStyles(node) {\n    /* $FlowFixMe(>=0.68.0 site=react_native_fb) This comment suppresses an\n     * error found when Flow v0.68 was deployed. To see the error delete this\n     * comment and run Flow. */\n    if (typeof node.update === 'function') {\n      animatedStyles.add(node);\n    } else {\n      node.__getChildren().forEach(findAnimatedStyles);\n    }\n  }\n\n  findAnimatedStyles(rootNode);\n  /* $FlowFixMe */\n\n  animatedStyles.forEach(animatedStyle => animatedStyle.update());\n}\n/**\n * Standard value for driving animations.  One `Animated.Value` can drive\n * multiple properties in a synchronized fashion, but can only be driven by one\n * mechanism at a time.  Using a new mechanism (e.g. starting a new animation,\n * or calling `setValue`) will stop any previous ones.\n *\n * See https://reactnative.dev/docs/animatedvalue.html\n */\n\n\nclass AnimatedValue extends AnimatedWithChildren {\n  constructor(value) {\n    super();\n\n    if (typeof value !== 'number') {\n      throw new Error('AnimatedValue: Attempting to set value to undefined');\n    }\n\n    this._startingValue = this._value = value;\n    this._offset = 0;\n    this._animation = null;\n  }\n\n  __detach() {\n    if (this.__isNative) {\n      NativeAnimatedAPI.getValue(this.__getNativeTag(), value => {\n        this._value = value;\n      });\n    }\n\n    this.stopAnimation();\n\n    super.__detach();\n  }\n\n  __getValue() {\n    return this._value + this._offset;\n  }\n  /**\n   * Directly set the value.  This will stop any animations running on the value\n   * and update all the bound properties.\n   *\n   * See https://reactnative.dev/docs/animatedvalue.html#setvalue\n   */\n\n\n  setValue(value) {\n    if (this._animation) {\n      this._animation.stop();\n\n      this._animation = null;\n    }\n\n    this._updateValue(value, !this.__isNative\n    /* don't perform a flush for natively driven values */\n    );\n\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value);\n    }\n  }\n  /**\n   * Sets an offset that is applied on top of whatever value is set, whether via\n   * `setValue`, an animation, or `Animated.event`.  Useful for compensating\n   * things like the start of a pan gesture.\n   *\n   * See https://reactnative.dev/docs/animatedvalue.html#setoffset\n   */\n\n\n  setOffset(offset) {\n    this._offset = offset;\n\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);\n    }\n  }\n  /**\n   * Merges the offset value into the base value and resets the offset to zero.\n   * The final output of the value is unchanged.\n   *\n   * See https://reactnative.dev/docs/animatedvalue.html#flattenoffset\n   */\n\n\n  flattenOffset() {\n    this._value += this._offset;\n    this._offset = 0;\n\n    if (this.__isNative) {\n      NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n  /**\n   * Sets the offset value to the base value, and resets the base value to zero.\n   * The final output of the value is unchanged.\n   *\n   * See https://reactnative.dev/docs/animatedvalue.html#extractoffset\n   */\n\n\n  extractOffset() {\n    this._offset += this._value;\n    this._value = 0;\n\n    if (this.__isNative) {\n      NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n  /**\n   * Stops any running animation or tracking. `callback` is invoked with the\n   * final value after stopping the animation, which is useful for updating\n   * state to match the animation position with layout.\n   *\n   * See https://reactnative.dev/docs/animatedvalue.html#stopanimation\n   */\n\n\n  stopAnimation(callback) {\n    this.stopTracking();\n    this._animation && this._animation.stop();\n    this._animation = null;\n    callback && callback(this.__getValue());\n  }\n  /**\n   * Stops any animation and resets the value to its original.\n   *\n   * See https://reactnative.dev/docs/animatedvalue.html#resetanimation\n   */\n\n\n  resetAnimation(callback) {\n    this.stopAnimation(callback);\n    this._value = this._startingValue;\n  }\n\n  _onAnimatedValueUpdateReceived(value) {\n    this._updateValue(value, false\n    /*flush*/\n    );\n  }\n  /**\n   * Interpolates the value before updating the property, e.g. mapping 0-1 to\n   * 0-10.\n   */\n\n\n  interpolate(config) {\n    return new AnimatedInterpolation(this, config);\n  }\n  /**\n   * Typically only used internally, but could be used by a custom Animation\n   * class.\n   *\n   * See https://reactnative.dev/docs/animatedvalue.html#animate\n   */\n\n\n  animate(animation, callback) {\n    var handle = null;\n\n    if (animation.__isInteraction) {\n      handle = InteractionManager.createInteractionHandle();\n    }\n\n    var previousAnimation = this._animation;\n    this._animation && this._animation.stop();\n    this._animation = animation;\n    animation.start(this._value, value => {\n      // Natively driven animations will never call into that callback, therefore we can always\n      // pass flush = true to allow the updated value to propagate to native with setNativeProps\n      this._updateValue(value, true\n      /* flush */\n      );\n    }, result => {\n      this._animation = null;\n\n      if (handle !== null) {\n        InteractionManager.clearInteractionHandle(handle);\n      }\n\n      callback && callback(result);\n    }, previousAnimation, this);\n  }\n  /**\n   * Typically only used internally.\n   */\n\n\n  stopTracking() {\n    this._tracking && this._tracking.__detach();\n    this._tracking = null;\n  }\n  /**\n   * Typically only used internally.\n   */\n\n\n  track(tracking) {\n    this.stopTracking();\n    this._tracking = tracking;\n  }\n\n  _updateValue(value, flush) {\n    if (value === undefined) {\n      throw new Error('AnimatedValue: Attempting to set value to undefined');\n    }\n\n    this._value = value;\n\n    if (flush) {\n      _flush(this);\n    }\n\n    super.__callListeners(this.__getValue());\n  }\n\n  __getNativeConfig() {\n    return {\n      type: 'value',\n      value: this._value,\n      offset: this._offset\n    };\n  }\n\n}\n\nexport default AnimatedValue;"]},"metadata":{},"sourceType":"module"}